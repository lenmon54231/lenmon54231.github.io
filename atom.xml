<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog|lenMon&#39;s</title>
  
  <subtitle>记录博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lenmon54231.github.io.git/"/>
  <updated>2020-01-18T04:19:57.860Z</updated>
  <id>http://lenmon54231.github.io.git/</id>
  
  <author>
    <name>lenMon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实现平滑上移到顶部</title>
    <link href="http://lenmon54231.github.io.git/2019/12/03/%E5%AE%9E%E7%8E%B0%E5%B9%B3%E6%BB%91%E4%B8%8A%E7%A7%BB%E5%88%B0%E9%A1%B6%E9%83%A8/"/>
    <id>http://lenmon54231.github.io.git/2019/12/03/%E5%AE%9E%E7%8E%B0%E5%B9%B3%E6%BB%91%E4%B8%8A%E7%A7%BB%E5%88%B0%E9%A1%B6%E9%83%A8/</id>
    <published>2019-12-03T09:16:26.000Z</published>
    <updated>2020-01-18T04:19:57.860Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="实现平滑上移到顶部"><a href="#实现平滑上移到顶部" class="headerlink" title="实现平滑上移到顶部"></a>实现平滑上移到顶部</h2><h3 id="完美平滑实现一个“回到顶部"><a href="#完美平滑实现一个“回到顶部" class="headerlink" title="完美平滑实现一个“回到顶部"></a>完美平滑实现一个“回到顶部</h3><p>在实际应用中，经常用到滚动到页面顶部或某个位置，一般简单用锚点处理或用js将document.body.scrollTop设置为0，结果是页面一闪而过滚到指定位置，不是特别友好。我们想要的效果是要有点缓冲效果。</p><p>现代浏览器陆续意识到了这种需求，scrollIntoView意思是滚动到可视，css中提供了scroll-behavior属性，js有Element.scrollIntoView()方法。</p><a id="more"></a><h3 id="scroll-behavior-纯CSS实现"><a href="#scroll-behavior-纯CSS实现" class="headerlink" title="scroll-behavior 纯CSS实现"></a>scroll-behavior 纯CSS实现</h3><p><strong>现在css支持了新的功能，scroll-behavior属性可取值auto|smooth|inherit|unset</strong></p><p>scroll-behavior: smooth;是我们想要的缓冲效果。在PC浏览器中，页面默认滚动是在<html>标签上，移动端大多数在<body>标签上，在我们想要实现平滑“回到顶部”，只需在这两个标签上都加上：</body></html></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">scroll-behavior</span>: smooth;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><blockquote><p>当然，这个实现方法现在支持度比较不友好</p></blockquote><h3 id="Element-scrollIntoView-新的方法"><a href="#Element-scrollIntoView-新的方法" class="headerlink" title="Element.scrollIntoView() 新的方法"></a>Element.scrollIntoView() 新的方法</h3><p>Element.scrollIntoView() 方法让当前的元素滚动到浏览器窗口的可视区域内。</p><p><strong>语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">element.scrollIntoView(); <span class="comment">// 等同于element.scrollIntoView(true) </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">element.scrollIntoView(alignToTop); <span class="comment">// Boolean型参数 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">element.scrollIntoView(scrollIntoViewOptions); <span class="comment">// Object型参数</span></span></pre></td></tr></table></figure><p><strong>参数</strong> </p><p><code>alignToTop</code>可选</p><p>一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Boolean" target="_blank" rel="noopener"><code>Boolean</code></a>值：</p><ul><li>如果为<code>true</code>，元素的顶端将和其所在滚动区的可视区域的顶端对齐。相应的 <code>scrollIntoViewOptions: {block: &quot;start&quot;, inline: &quot;nearest&quot;}</code>。这是这个参数的默认值。</li><li>如果为<code>false</code>，元素的底端将和其所在滚动区的可视区域的底端对齐。相应的<code>scrollIntoViewOptions: {block: &quot;end&quot;, inline: &quot;nearest&quot;}</code>。</li></ul><p><code>scrollIntoViewOptions</code> 可选 </p><p>一个包含下列属性的对象：</p><ul><li><p><code>behavior</code> 可选</p><p>定义动画过渡效果， <code>&quot;auto&quot;</code>或 <code>&quot;smooth&quot;</code> 之一。默认为 <code>&quot;auto&quot;</code>。</p></li><li><p><code>block</code> 可选</p><p>定义垂直方向的对齐， <code>&quot;start&quot;</code>, <code>&quot;center&quot;</code>, <code>&quot;end&quot;</code>, 或 <code>&quot;nearest&quot;</code>之一。默认为 <code>&quot;start&quot;</code>。</p></li><li><p><code>inline</code> 可选</p><p>定义水平方向的对齐， <code>&quot;start&quot;</code>, <code>&quot;center&quot;</code>, <code>&quot;end&quot;</code>, 或 <code>&quot;nearest&quot;</code>之一。默认为 <code>&quot;nearest&quot;</code>。</p></li></ul><p><strong>例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">element.scrollIntoView();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">element.scrollIntoView(<span class="literal">false</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">element.scrollIntoView(&#123;<span class="attr">block</span>: <span class="string">"end"</span>&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">element.scrollIntoView(&#123;<span class="attr">behavior</span>: <span class="string">"instant"</span>, <span class="attr">block</span>: <span class="string">"end"</span>, <span class="attr">inline</span>: <span class="string">"nearest"</span>&#125;);</span></pre></td></tr></table></figure><blockquote><p>当然，兼容性也是有问题的。</p></blockquote><h3 id="向下兼容"><a href="#向下兼容" class="headerlink" title="向下兼容"></a>向下兼容</h3><p>要达到所有浏览器都有相同（类似）效果，那就要把剩余不支持scroll-behavior属性的浏览器揪出来，用js去完成使命了。</p><p><strong>注意点</strong></p><ol><li><p>判断是否支持scroll-behavior属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">window</span>.getComputedStyle(<span class="built_in">document</span>.body).scrollBehavior === <span class="string">'undefined'</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 兼容js代码</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 原生滚动api</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Element.scrollIntoView()</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li><p>缓冲功能的实现</p><p>原理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> position = position + (destination - position) / n;</span></pre></td></tr></table></figure></li><li><p>贴上代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"javascript"</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> scrollTopSmooth = <span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 不存在原生`requestAnimationFrame`，用`setTimeout`模拟替代</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!<span class="built_in">window</span>.requestAnimationFrame) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">window</span>.requestAnimationFrame = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">return</span> setTimeout(cb, <span class="number">17</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 当前滚动高度</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// step</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> step = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> distance = position - scrollTop;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    scrollTop = scrollTop + distance / <span class="number">5</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(distance) &lt; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, position);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">      <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, scrollTop);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      requestAnimationFrame(step);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  step();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">$backToTop = <span class="built_in">document</span>.querySelector(<span class="string">'.back-to-top'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">$backToTop.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  scrollTopSmooth(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&#125;, <span class="literal">false</span>);   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure><h3 id="简单封装"><a href="#简单封装" class="headerlink" title="简单封装"></a>简单封装</h3><p>上面缓冲算法和当前滚动业务代码耦合在一起了，下面单独拆解出单独一个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">* 缓冲函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">* @param &#123;Number&#125; position 当前滚动位置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">* @param &#123;Number&#125; destination 目标位置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">* @param &#123;Number&#125; rate 缓动率</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">* @param &#123;Function&#125; callback 缓动结束回调函数 两个参数分别是当前位置和是否结束</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">*/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> easeout = <span class="function"><span class="keyword">function</span> (<span class="params">position, destination, rate, callback</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (position === destination || <span class="keyword">typeof</span> destination !== <span class="string">'number'</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  destination = destination || <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  rate = rate || <span class="number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 不存在原生`requestAnimationFrame`，用`setTimeout`模拟替代</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!<span class="built_in">window</span>.requestAnimationFrame) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">window</span>.requestAnimationFrame = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">return</span> setTimeout(fn, <span class="number">17</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> step = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    position = position + (destination - position) / rate;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(destination - position) &lt; <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">      callback(destination, <span class="literal">true</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    callback(position, <span class="literal">false</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    requestAnimationFrame(step);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  step();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>拆分后，这个小缓冲算法就可以被重复调用啦，而且，适用于滚动到指定位置（不仅仅是到顶部）和缓冲率（控制滚动快慢），当前小demo调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scrollTopSmooth = <span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 当前滚动高度</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  easeout(scrollTop, position, <span class="number">5</span>, <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, val);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">$backToTop = <span class="built_in">document</span>.querySelector(<span class="string">'.back-to-top'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">$backToTop.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  scrollTopSmooth(<span class="number">200</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;, <span class="literal">false</span>);</span></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;实现平滑上移到顶部&quot;&gt;&lt;a href=&quot;#实现平滑上移到顶部&quot; class=&quot;headerlink&quot; title=&quot;实现平滑上移到顶部&quot;&gt;&lt;/a&gt;实现平滑上移到顶部&lt;/h2&gt;&lt;h3 id=&quot;完美平滑实现一个“回到顶部&quot;&gt;&lt;a href=&quot;#完美平滑实现一个“回到顶部&quot; class=&quot;headerlink&quot; title=&quot;完美平滑实现一个“回到顶部&quot;&gt;&lt;/a&gt;完美平滑实现一个“回到顶部&lt;/h3&gt;&lt;p&gt;在实际应用中，经常用到滚动到页面顶部或某个位置，一般简单用锚点处理或用js将document.body.scrollTop设置为0，结果是页面一闪而过滚到指定位置，不是特别友好。我们想要的效果是要有点缓冲效果。&lt;/p&gt;
&lt;p&gt;现代浏览器陆续意识到了这种需求，scrollIntoView意思是滚动到可视，css中提供了scroll-behavior属性，js有Element.scrollIntoView()方法。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="github" scheme="http://lenmon54231.github.io.git/tags/github/"/>
    
      <category term="hexo" scheme="http://lenmon54231.github.io.git/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>冒泡，捕获与其阻止</title>
    <link href="http://lenmon54231.github.io.git/2019/12/03/%E5%86%92%E6%B3%A1%EF%BC%8C%E6%8D%95%E8%8E%B7%E4%B8%8E%E5%85%B6%E9%98%BB%E6%AD%A2/"/>
    <id>http://lenmon54231.github.io.git/2019/12/03/%E5%86%92%E6%B3%A1%EF%BC%8C%E6%8D%95%E8%8E%B7%E4%B8%8E%E5%85%B6%E9%98%BB%E6%AD%A2/</id>
    <published>2019-12-03T09:16:26.000Z</published>
    <updated>2020-01-18T08:43:42.572Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="冒泡，捕获与其阻止"><a href="#冒泡，捕获与其阻止" class="headerlink" title="冒泡，捕获与其阻止"></a>冒泡，捕获与其阻止</h2><h3 id="js-addEventListener事件捕获与冒泡-第三个参数详解-阻止事件传播"><a href="#js-addEventListener事件捕获与冒泡-第三个参数详解-阻止事件传播" class="headerlink" title="js addEventListener事件捕获与冒泡,第三个参数详解,阻止事件传播"></a>js addEventListener事件捕获与冒泡,第三个参数详解,阻止事件传播</h3><p><strong>关键点</strong></p><blockquote><p>element.addEventListener(event, function[, useCapture])</p></blockquote><ol><li><p>event:事件名称,如click</p></li><li><p>function:指定要事件触发时执行的函数,可以传入事件参数</p></li><li><p>useCapture:可选。布尔值，指定事件是否在捕获或冒泡阶段执行。</p><ul><li><p>默认false:在冒泡阶段执行指定事件</p></li><li><p>true:在捕获阶段执行事件</p></li></ul></li><li><p>event.stopPropagation():阻止事件传播,用于function(event){}中</p><a id="more"></a></li></ol><h3 id="捕获与冒泡"><a href="#捕获与冒泡" class="headerlink" title="捕获与冒泡"></a>捕获与冒泡</h3><p>图示：</p><p><img src="https://img-blog.csdnimg.cn/20190122115236901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x5dF9hbmd1bGFyanM=,size_16,color_FFFFFF,t_70" alt></p><p>冒泡js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">e</span>)</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   aa.addEventListener(<span class="string">'click'</span>,print);<span class="comment">//第三个参数默认为false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   bb.addEventListener(<span class="string">'click'</span>,print);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   cc.addEventListener(<span class="string">'click'</span>,print);</span></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cc</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">bb</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">aa</span></pre></td></tr></table></figure><p>这个结果明显是从内到外去执行的，是冒泡阶段执行，因为默认的是false。</p><p>捕获js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">e</span>)</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> aa.addEventListener(<span class="string">'click'</span>,print,<span class="literal">true</span>);<span class="comment">//第三个参数默认为false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> bb.addEventListener(<span class="string">'click'</span>,print,<span class="literal">true</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> cc.addEventListener(<span class="string">'click'</span>,print,<span class="literal">true</span>);</span></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">aa</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">bb</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">cc</span></pre></td></tr></table></figure><p>当改为true时，则要执行捕获阶段，从外到内去执行。</p><h3 id="阻止传播行为"><a href="#阻止传播行为" class="headerlink" title="阻止传播行为"></a>阻止传播行为</h3><p>当有时候不需要点击激活所有的行为时，可以采用对应的方法阻止</p><p>js代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">e</span>)</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">e.stopPropagation();<span class="comment">//执行完此函数后,该事件不再继续传播</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> aa.addEventListener(<span class="string">'click'</span>,print,<span class="literal">true</span>);<span class="comment">//第三个参数默认为false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> bb.addEventListener(<span class="string">'click'</span>,print,<span class="literal">true</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"> cc.addEventListener(<span class="string">'click'</span>,print,<span class="literal">true</span>);</span></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">aa</span></pre></td></tr></table></figure><p>再点击cc时,捕获cc,执行cc的click函数, 因为print函数中有<code>e.stopPropagation()</code>,所以执行完该函数后,click事件不再传播.</p><h3 id="取消默认事件"><a href="#取消默认事件" class="headerlink" title="取消默认事件"></a>取消默认事件</h3><p>除了冒泡行为，有的时候还会遇到默认事件</p><p>什么元素有默认行为呢？如链接<a>，提交按钮<input type="submit">等。</a></p><p><strong>阻止默认事件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//假定有链接&lt;a href="http://caibaojian.com/" id="testA" &gt;caibaojian.com&lt;/a&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">"testA"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">a.onclick =<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(e.preventDefault)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">e.preventDefault();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.event.returnValue == <span class="literal">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>当需要停止冒泡行为时，可以使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopBubble</span>(<span class="params">e</span>) </span>&#123; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果提供了事件对象，则这是一个非IE浏览器 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( e &amp;&amp; e.stopPropagation ) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//因此它支持W3C的stopPropagation()方法 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    e.stopPropagation(); </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//否则，我们需要使用IE的方式来取消事件冒泡 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>当需要阻止默认行为时，可以使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//阻止浏览器的默认行为 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopDefault</span>(<span class="params"> e </span>) </span>&#123; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//阻止默认浏览器动作(W3C) </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> ( e &amp;&amp; e.preventDefault ) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        e.preventDefault(); </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//IE中阻止函数器默认动作的方式 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">else</span> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;冒泡，捕获与其阻止&quot;&gt;&lt;a href=&quot;#冒泡，捕获与其阻止&quot; class=&quot;headerlink&quot; title=&quot;冒泡，捕获与其阻止&quot;&gt;&lt;/a&gt;冒泡，捕获与其阻止&lt;/h2&gt;&lt;h3 id=&quot;js-addEventListener事件捕获与冒泡-第三个参数详解-阻止事件传播&quot;&gt;&lt;a href=&quot;#js-addEventListener事件捕获与冒泡-第三个参数详解-阻止事件传播&quot; class=&quot;headerlink&quot; title=&quot;js addEventListener事件捕获与冒泡,第三个参数详解,阻止事件传播&quot;&gt;&lt;/a&gt;js addEventListener事件捕获与冒泡,第三个参数详解,阻止事件传播&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;关键点&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;element.addEventListener(event, function[, useCapture])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;event:事件名称,如click&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;function:指定要事件触发时执行的函数,可以传入事件参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;useCapture:可选。布尔值，指定事件是否在捕获或冒泡阶段执行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;默认false:在冒泡阶段执行指定事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;true:在捕获阶段执行事件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;event.stopPropagation():阻止事件传播,用于function(event){}中&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="冒泡" scheme="http://lenmon54231.github.io.git/tags/%E5%86%92%E6%B3%A1/"/>
    
      <category term="捕获" scheme="http://lenmon54231.github.io.git/tags/%E6%8D%95%E8%8E%B7/"/>
    
  </entry>
  
  <entry>
    <title>初始模板</title>
    <link href="http://lenmon54231.github.io.git/2019/12/02/api%E8%B0%83%E7%94%A8%E5%9B%BE%E7%89%87403/"/>
    <id>http://lenmon54231.github.io.git/2019/12/02/api%E8%B0%83%E7%94%A8%E5%9B%BE%E7%89%87403/</id>
    <published>2019-12-02T09:16:26.000Z</published>
    <updated>2019-12-11T11:31:24.345Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="豆瓣api调用图片403提示"><a href="#豆瓣api调用图片403提示" class="headerlink" title="豆瓣api调用图片403提示"></a>豆瓣api调用图片403提示</h2><h3 id="豆瓣api"><a href="#豆瓣api" class="headerlink" title="豆瓣api"></a>豆瓣api</h3><p>需要搭建一个电影类的分类网站，所以会调用到豆瓣的api，现在官方没有给公共的api使用，于是网上找了下有提供备份的api使用，地址如下：<a href="https://douban.uieee.com/" target="_blank" rel="noopener">豆瓣api</a></p><p>使用这个地址，可以直接访问到豆瓣的内容，但是使用过程中，发现关于电影的名字，类型，上映年份都可以直接访问，只有图片没有办法访问，有提示403错误。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>豆瓣使用了防盗链：</p><p>很多时候别人直接把我们的网站的资源拿去在他们网站展示，但是消费的是我们的流量，为了解决这种问题，才会有防盗链这个思路</p><p>这里说的只是一个简单的概念，既使用host和reffer请求头做对比，简单的做一个处理，主要是用来熟悉http头</p><a id="more"></a><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在页面中加上 <meta name="referrer" content="never"></p><p><img src="https://limengtupian.oss-cn-beijing.aliyuncs.com/%E9%98%B2%E7%9B%97%E9%93%BE.png" alt="fangdao"></p><p>实现了正常的访问！</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;豆瓣api调用图片403提示&quot;&gt;&lt;a href=&quot;#豆瓣api调用图片403提示&quot; class=&quot;headerlink&quot; title=&quot;豆瓣api调用图片403提示&quot;&gt;&lt;/a&gt;豆瓣api调用图片403提示&lt;/h2&gt;&lt;h3 id=&quot;豆瓣api&quot;&gt;&lt;a href=&quot;#豆瓣api&quot; class=&quot;headerlink&quot; title=&quot;豆瓣api&quot;&gt;&lt;/a&gt;豆瓣api&lt;/h3&gt;&lt;p&gt;需要搭建一个电影类的分类网站，所以会调用到豆瓣的api，现在官方没有给公共的api使用，于是网上找了下有提供备份的api使用，地址如下：&lt;a href=&quot;https://douban.uieee.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;豆瓣api&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用这个地址，可以直接访问到豆瓣的内容，但是使用过程中，发现关于电影的名字，类型，上映年份都可以直接访问，只有图片没有办法访问，有提示403错误。&lt;/p&gt;
&lt;h3 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;p&gt;豆瓣使用了防盗链：&lt;/p&gt;
&lt;p&gt;很多时候别人直接把我们的网站的资源拿去在他们网站展示，但是消费的是我们的流量，为了解决这种问题，才会有防盗链这个思路&lt;/p&gt;
&lt;p&gt;这里说的只是一个简单的概念，既使用host和reffer请求头做对比，简单的做一个处理，主要是用来熟悉http头&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="github" scheme="http://lenmon54231.github.io.git/tags/github/"/>
    
      <category term="hexo" scheme="http://lenmon54231.github.io.git/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>&lt;keep-alive&gt; 的使用与周期</title>
    <link href="http://lenmon54231.github.io.git/2019/12/02/keep-alive%20%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%91%A8%E6%9C%9F/"/>
    <id>http://lenmon54231.github.io.git/2019/12/02/keep-alive%20%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%91%A8%E6%9C%9F/</id>
    <published>2019-12-02T09:16:26.000Z</published>
    <updated>2020-01-06T08:07:20.761Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="keep-alive-的使用与周期"><a href="#keep-alive-的使用与周期" class="headerlink" title="keep-alive 的使用与周期"></a>keep-alive 的使用与周期</h2><h3 id="使用keep-alive的时机"><a href="#使用keep-alive的时机" class="headerlink" title="使用keep-alive的时机"></a>使用keep-alive的时机</h3><p>在搭建 vue 项目时，有某些组件没必要多次渲染，所以需要将组件在内存中进行‘持久化，此时 keep-alive 便可以派上用场了。keep-alive  可以使被包含的组件状态维持不变，即便是组件切换了，其内的状态依旧维持在内存之中。在下一次显示时，也不会重现渲染。</p><blockquote><p>PS：<code>与</code>相似，只是一个抽象组件，它不会在DOM树中渲染(真实或者虚拟都不会)，也不在父组件链中存在，比如：你永远在 <code>this.$parent</code> 中找不到 <code>keep-alive</code> 。</p></blockquote><a id="more"></a><h3 id="配合router-view去使用"><a href="#配合router-view去使用" class="headerlink" title="配合router-view去使用"></a>配合router-view去使用</h3><p>有些时候可能需要将整个路由页面一切缓存下来，也就是将 `` 进行缓存。这种使用场景还是蛮多的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    &lt;router-view v-<span class="keyword">if</span>=<span class="string">"$router.meta.keepAlive"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="regexp">/keep-alive&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">&lt;router-view v-if="!$router.meta.keepAlive"&gt;&lt;/</span>router-view&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//router配置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Router(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    routes: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            name: <span class="string">'a'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            path: <span class="string">'/a'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            component: A,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            meta: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                keepAlive: <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            name: <span class="string">'b'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            path: <span class="string">'/b'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            component: B</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure><h3 id="keep-alive-生命周期和新属性"><a href="#keep-alive-生命周期和新属性" class="headerlink" title="keep-alive 生命周期和新属性"></a>keep-alive 生命周期和新属性</h3><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>被包含在 `` 中创建的组件，会多出两个生命周期的钩子: <code>activated</code> 与 <code>deactivated</code></p><ul><li>activated</li></ul><p>在组件被激活时调用，<strong>在组件第一次渲染时也会被调用</strong>，之后每次keep-alive激活时被调用。</p><ul><li>deactivated</li></ul><p>在组件被停用时调用。</p><blockquote><p>注意：只有组件被 <code>keep-alive</code> 包裹时，这两个生命周期才会被调用，如果作为正常组件使用，是不会被调用，以及在 <code>2.1.0</code> 版本之后，使用 <code>exclude</code> 排除之后，就算被包裹在 <code>keep-alive</code> 中，这两个钩子依然不会被调用！另外在服务端渲染时此钩子也不会被调用的。</p></blockquote><h4 id="新属性"><a href="#新属性" class="headerlink" title="新属性"></a>新属性</h4><p>在vue <code>2.1.0</code> 版本之后，<code>keep-alive</code> 新加入了两个属性: <code>include</code>(包含的组件缓存生效) 与 <code>exclude</code>(排除的组件不缓存，优先级大于include) 。</p><p><code>include</code> 和 <code>exclude</code> 属性允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示</p><p>当使用正则或者是数组时，一定要使用 <code>v-bind</code> !</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;!-- 逗号分隔字符串，只有组件a与b被缓存。这样使用场景变得更有意义了 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=<span class="string">"a,b"</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  &lt;component :is=<span class="string">"view"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="regexp">/keep-alive&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="regexp"></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">&lt;!-- 正则表达式 (需要使用 v-bind，符合匹配规则的都会被缓存) --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">&lt;keep-alive :include="/</span>a|b/<span class="string">"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="string">  &lt;component :is="</span>view<span class="string">"&gt;&lt;/component&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;/keep-alive&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;!-- Array (需要使用 v-bind，被包含的都会被缓存) --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;keep-alive :include="</span>[<span class="string">'a'</span>, <span class="string">'b'</span>]<span class="string">"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="string">  &lt;component :is="</span>view<span class="string">"&gt;&lt;/component&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;/keep-alive&gt;</span></span></pre></td></tr></table></figure><ul><li>有了include之后，再与 <code>router-view</code> 一起使用时便方便许多了:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;!-- 一个include解决了，不需要多写一个标签，也不需要在路由元中添加keepAlive了 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=<span class="string">'a'</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    &lt;router-view&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="regexp">/keeo-alive&gt;</span></span></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><p>keeo-alive先匹配被包含组件的 <code>name</code> 字段，如果 <code>name</code> 不可用，则匹配当前组件 <code>components</code> 配置中的注册名称。</p></li><li><p>keeo-alive不会在函数式组件中正常工作，因为它们没有缓存实例。</p></li><li><p>当匹配条件同时在 <code>include</code> 与 <code>exclude</code> 存在时，以 <code>exclude</code> 优先级最高(当前vue 2.4.2 version)。比如：包含于排除同时匹配到了组件A，那组件A不会被缓存。</p></li><li><p>包含在 keeo-alive 中，但符合 <code>exclude</code> ，不会调用<code>activated</code> 和 <code>deactivated</code>。</p></li><li><p><strong>设置了<code>keep-alive</code>,这个时候不会触发生命周期的钩子函数。</strong></p><p>当页面内的数据没有发生变化时，页面内的操作比如跳转到另一个路由，是不会去经过生命周期函数的，比如：desdtroy函数等。</p><p>它会直接在进入的时候触发<code>activated</code> 和离开的时候触发 deactivated。</p><p>所以，如果是有涉及到之前放入mouted周期中的函数，可以将其放入activated，放入desdtroy周期的函数可以放入deactivated。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;keep-alive-的使用与周期&quot;&gt;&lt;a href=&quot;#keep-alive-的使用与周期&quot; class=&quot;headerlink&quot; title=&quot;keep-alive 的使用与周期&quot;&gt;&lt;/a&gt;keep-alive 的使用与周期&lt;/h2&gt;&lt;h3 id=&quot;使用keep-alive的时机&quot;&gt;&lt;a href=&quot;#使用keep-alive的时机&quot; class=&quot;headerlink&quot; title=&quot;使用keep-alive的时机&quot;&gt;&lt;/a&gt;使用keep-alive的时机&lt;/h3&gt;&lt;p&gt;在搭建 vue 项目时，有某些组件没必要多次渲染，所以需要将组件在内存中进行‘持久化，此时 keep-alive 便可以派上用场了。keep-alive  可以使被包含的组件状态维持不变，即便是组件切换了，其内的状态依旧维持在内存之中。在下一次显示时，也不会重现渲染。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：&lt;code&gt;与&lt;/code&gt;相似，只是一个抽象组件，它不会在DOM树中渲染(真实或者虚拟都不会)，也不在父组件链中存在，比如：你永远在 &lt;code&gt;this.$parent&lt;/code&gt; 中找不到 &lt;code&gt;keep-alive&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="keep-alive" scheme="http://lenmon54231.github.io.git/tags/keep-alive/"/>
    
      <category term="周期，desdtroy" scheme="http://lenmon54231.github.io.git/tags/%E5%91%A8%E6%9C%9F%EF%BC%8Cdesdtroy/"/>
    
  </entry>
  
  <entry>
    <title>静态布局、自适应布局、流式布局、响应式布局、弹性布局等的概念和区别</title>
    <link href="http://lenmon54231.github.io.git/2019/12/02/%E9%9D%99%E6%80%81%E5%B8%83%E5%B1%80%E3%80%81%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80%E3%80%81%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80%E3%80%81%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E3%80%81%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80%E7%AD%89%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8C%BA%E5%88%AB/"/>
    <id>http://lenmon54231.github.io.git/2019/12/02/%E9%9D%99%E6%80%81%E5%B8%83%E5%B1%80%E3%80%81%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80%E3%80%81%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80%E3%80%81%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E3%80%81%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80%E7%AD%89%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8C%BA%E5%88%AB/</id>
    <published>2019-12-02T09:16:26.000Z</published>
    <updated>2019-12-03T15:01:01.272Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="静态布局、自适应布局、流式布局、响应式布局、弹性布局等的概念和区别"><a href="#静态布局、自适应布局、流式布局、响应式布局、弹性布局等的概念和区别" class="headerlink" title="静态布局、自适应布局、流式布局、响应式布局、弹性布局等的概念和区别"></a>静态布局、自适应布局、流式布局、响应式布局、弹性布局等的概念和区别</h2><h3 id="静态布局"><a href="#静态布局" class="headerlink" title="静态布局"></a>静态布局</h3><ol><li><p>布局特点：不管浏览器尺寸具体是多少，网页布局始终按照最初写代码时的布局来显示。常规的pc的网站都是静态（定宽度）布局的，也就是设置了min-width，这样的话，如果小于这个宽度就会出现滚动条，如果大于这个宽度则内容居中外加背景，这种设计常见与pc端。</p></li><li><p>布局特点：不管浏览器尺寸具体是多少，网页布局始终按照最初写代码时的布局来显示。</p><p>常规的pc的网站都是静态（定宽度）布局的，也就是设置了min-width，这样的话，如果小于这个宽度就会出现滚动条，如果大于这个宽度则内容居中外加背景，这种设计常见与pc端。</p></li><li><ul><li>优点：这种布局方式对设计师和CSS编写者来说都是最简单的，亦没有兼容性问题。</li><li>缺点：显而易见，即不能根据用户的屏幕尺寸做出不同的表现。<a id="more"></a></li></ul></li></ol><h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><ol><li><p>流式布局（Liquid）的特点（也叫”Fluid”) 是页面元素的宽度按照屏幕分辨率进行适配调整，但整体布局不变。代表作栅栏系统（网格系统）。</p></li><li><p>网页中主要的划分区域的尺寸使用百分数（搭配min-<em>、max-</em>属性使用），例如，设置网页主体的宽度为80%，min-width为960px。图片也作类似处理（width:100%, max-width一般设定为图片本身的尺寸，防止被拉伸而失真）。</p></li><li><p>布局和设计</p><ul><li><p>布局特点：屏幕分辨率变化时，页面里元素的大小会变化而但布局不变。【这就导致如果屏幕太大或者太小都会导致元素无法正常显示】</p></li><li><p>设计方法：使用%百分比定义宽度，高度大都是用px来固定住，可以根据可视区域 (viewport) 和父元素的实时尺寸进行调整，尽可能的适应各种分辨率。往往配合 max-width/min-width 等属性控制尺寸流动范围以免过大或者过小影响阅读。</p></li></ul></li><li><p>优点和缺点</p><ul><li>按照屏幕分辨率进行适配调整，但整体布局不变。适应早期的web布局，兼容性高</li><li><strong>缺点明显</strong>：<strong>主要的问题</strong>是如果屏幕尺度跨度太大，那么在相对其原始设计而言过小或过大的屏幕上不能正常显示。因为宽度使用%百分比定义，但是高度和文字大小等大都是用px来固定，所以在大屏幕的手机下显示效果会变成有些页面元素宽度被拉的很长，但是高度、文字大小还是和原来一样（即：<strong>这些东西无法变得“流式”</strong>），显示非常不协调。</li></ul></li></ol><h3 id="自适应布局"><a href="#自适应布局" class="headerlink" title="自适应布局"></a>自适应布局</h3><ol><li>自适应布局的特点是分别为不同的屏幕分辨率定义布局，即创建多个静态布局，每个静态布局对应一个屏幕分辨率范围。</li><li>实现方法<ul><li>使用 @media 媒体查询给不同尺寸和介质的设备切换不同的样式。在优秀的响应范围设计下可以给适配范围内的设备最好的体验，在同一个设备下实际还是固定的布局。</li></ul></li><li>特点<ul><li>布局特点：屏幕分辨率变化时，页面里面元素的位置会变化而大小不会变化。</li></ul></li><li>本质上是多个多个<strong><em>静态布局</em></strong>。</li></ol><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><ol><li><strong>可以把响应式布局看作是流式布局和自适应布局设计理念的融合</strong>。</li><li>响应式设计的目标是确保一个页面在所有终端上（各种尺寸的PC、手机、手表、冰箱的Web浏览器等等）都能显示出令人满意的效果，对CSS编写者而言，在实现上不拘泥于具体手法，但通常是糅合了流式布局+弹性布局，再搭配媒体查询技术使用。</li><li>设计方法：<ul><li>媒体查询+流式布局。通常使用 @media 媒体查询 和网格系统 (Grid System) 配合相对布局单位进行布局，实际上就是综合响应式、流动等上述技术通过 CSS 给单一网页不同设备返回不同样式的技术统称。</li></ul></li><li>特点：<ul><li>每个屏幕分辨率下面会有一个布局样式，即元素位置和大小都会变。</li></ul></li><li>优点和缺点：<ul><li>适应pc和移动端，如果足够耐心，效果完美</li><li>（1）媒体查询是有限的，也就是可以枚举出来的，只能适应主流的宽高。（2）要匹配足够多的屏幕大小，工作量不小，设计也需要多个版本。需要很多个@media。</li></ul></li><li>代表比如bootstrap，element等都是响应式的设计布局</li></ol><h3 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h3><ol><li>这类布局的特点是，<strong>包裹文字的各元素的尺寸采用em/rem做单位，而页面的主要划分区域的尺寸仍使用百分数或px做单位（同「流式布局」或「静态/固定布局」）</strong>。<strong>早期浏览器不支持整个页面按比例缩放</strong>，仅支持网页内文字尺寸的放大，这种情况下。使用em/rem做单位，可以使包裹文字的元素随着文字的缩放而缩放。</li><li><strong>rem,em区别</strong>：<ul><li>rem,em都是顺应不同网页字体大小展现而产生的。其中，em是相对其父元素，在实际应用中相对而言会带来很多不便；而rem是始终相对于html大小，即页面根元素。</li></ul></li><li>根据不同的屏幕尺寸，rem改变的是font-size的大小，但是本质上，客户看到的布局是没有改变的，这一点不同于响应式布局。</li><li><strong>响应式和弹性布局之间的对比：</strong><ul><li>rem布局：改变浏览器宽度，页面所有元素的高宽都等比例缩放，也就是大屏幕下导航是横的，小屏幕下还是横的只不过变小了。</li><li>响应式布局：改变浏览器宽度，“布局”会随之变化，不是一成不变的，例如导航栏在大屏幕下是横排，在小屏幕下是竖排，在超小屏幕下隐藏为菜单，也就是说如果有足够的耐心，在每一种屏幕下都应该有合理的布局，完美的效果。</li></ul></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><ol><li><p>如果只做pc端，那么静态布局（定宽度）是最好的选择；</p></li><li><p>如果做移动端，且设计对高度和元素间距要求不高，那么弹性布局（rem+js）是最好的选择，一份css+一份js调节font-size搞定；</p></li><li><p>如果pc，移动要兼容，而且要求很高那么响应式布局还是最好的选择，前提是设计根据不同的高宽做不同的设计，响应式根据媒体查询做不同的布局。</p></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;静态布局、自适应布局、流式布局、响应式布局、弹性布局等的概念和区别&quot;&gt;&lt;a href=&quot;#静态布局、自适应布局、流式布局、响应式布局、弹性布局等的概念和区别&quot; class=&quot;headerlink&quot; title=&quot;静态布局、自适应布局、流式布局、响应式布局、弹性布局等的概念和区别&quot;&gt;&lt;/a&gt;静态布局、自适应布局、流式布局、响应式布局、弹性布局等的概念和区别&lt;/h2&gt;&lt;h3 id=&quot;静态布局&quot;&gt;&lt;a href=&quot;#静态布局&quot; class=&quot;headerlink&quot; title=&quot;静态布局&quot;&gt;&lt;/a&gt;静态布局&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;布局特点：不管浏览器尺寸具体是多少，网页布局始终按照最初写代码时的布局来显示。常规的pc的网站都是静态（定宽度）布局的，也就是设置了min-width，这样的话，如果小于这个宽度就会出现滚动条，如果大于这个宽度则内容居中外加背景，这种设计常见与pc端。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;布局特点：不管浏览器尺寸具体是多少，网页布局始终按照最初写代码时的布局来显示。&lt;/p&gt;
&lt;p&gt;常规的pc的网站都是静态（定宽度）布局的，也就是设置了min-width，这样的话，如果小于这个宽度就会出现滚动条，如果大于这个宽度则内容居中外加背景，这种设计常见与pc端。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;优点：这种布局方式对设计师和CSS编写者来说都是最简单的，亦没有兼容性问题。&lt;/li&gt;
&lt;li&gt;缺点：显而易见，即不能根据用户的屏幕尺寸做出不同的表现。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="自适应布局" scheme="http://lenmon54231.github.io.git/tags/%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/"/>
    
      <category term="响应式布局，弹性布局" scheme="http://lenmon54231.github.io.git/tags/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%EF%BC%8C%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>防抖函数中的闭包</title>
    <link href="http://lenmon54231.github.io.git/2019/12/02/%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85-%E4%BF%9D%E5%AD%98/"/>
    <id>http://lenmon54231.github.io.git/2019/12/02/%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85-%E4%BF%9D%E5%AD%98/</id>
    <published>2019-12-02T09:16:26.000Z</published>
    <updated>2019-12-30T13:50:32.368Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="防抖函数中的闭包"><a href="#防抖函数中的闭包" class="headerlink" title="防抖函数中的闭包"></a>防抖函数中的闭包</h2><p>复制一份防止丢失</p><h3 id="debounce函数"><a href="#debounce函数" class="headerlink" title="debounce函数"></a>debounce函数</h3><p>debounce函数，俗称防抖函数，专治input、resize、scroll等频繁操作打爆浏览器或其他资源。前端面试几乎必考，当然肯定会做一些变化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="built_in">Date</span>.now());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>).addEventListener(<span class="string">'input'</span>, handler);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><p>用户每次输入操作都会触发handler调用，性能浪费。</p><a id="more"></a><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>用户一直输入并不触发handler，直到用户停止输入500ms以上，才触发一次handler。</p><p>前提是，不修改原有的业务代码，且尽量通用。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>setTimeout实现计时<br>高阶函数，即function作为参数并且返回function<br>代码实现过程</p><h3 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      fn();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;, delay);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>给handler包上试试</p><p>document.getElementById(‘input’).addEventListener(‘input’, debounce(handler, 500));<br>明显不可以！！这样写只不过将每次触发都延时了500ms，并没有减少触发次数。不过我们至少实现了高阶函数，不会破坏原有的业务代码了。那么接下来就试着减少触发次数。</p><p>思路就是每次触发先clearTimeout把之前的计时器清掉，再重新setTimout。那么问题来了，第2次进来时，怎么获取到第1次的计时器，并清除呢？</p><h3 id="第二版"><a href="#第二版" class="headerlink" title="第二版"></a>第二版</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> timer;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 闭包</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    clearTimeout(timer);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      fn();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;, delay);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>试来试去，发现把timer放到“外面”最好（为什么不放到更外面？），每次调用进来，大家用的都是一个timer，完美。同时，我们的第一个主角登场了——闭包。</p><p><strong>闭包</strong><br>闭包就是能够读取其他函数内部变量的函数。例如在javascript中，只有函数内部的子函数才能读取局部变量，所以闭包可以理解成“定义在一个函数内部的函数“。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。——百度百科</p><p>网上可以找个很多关于闭包的概念与解释，估计越看越蒙。认识事物需要一个从具象到抽象的过程，以目前的情况来看，我们只要知道，“定义在一个函数（外函数）内部的函数（内函数），并且内函数访问了外函数的变量，这个内函数就叫做闭包”。</p><p>最关键的问题，闭包有什么用？从debounce这个例子，我们可以看到，闭包可以让每次触发的handler共享一个变量，通常用到高阶函数的地方，就会用到闭包。再举几个闭包的应用场景，比如给ajax请求加缓存、加锁，为一系列回调设置初始值，防止污染全局或局部变量等。可能这么说大家还是若有若无的，没关系，实践出真知，现实当中肯定会碰到能够应用闭包的地方的。我们继续debounce。</p><p>终于解决了触发频率的问题了。但是！细心的同学肯定发现了。我们handler里的console打印出来的this，是不一样的！！！之前的this是input结点，现在的this是window对象。这绝对是不行的，比如我想要在handler里打印input的value，现在怎么做呢？</p><h3 id="第三版"><a href="#第三版" class="headerlink" title="第三版"></a>第三版</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> timer;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 闭包</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> ctx = <span class="keyword">this</span>; <span class="comment">// this上下文</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    clearTimeout(timer);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// 3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      fn.apply(ctx); <span class="comment">// this上下文调用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;, delay);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>解决思路也简单，就是先把正确的this保存起来，我们在这里把this称为“上下文”，大家可以细细品味一下这个词。然后用apply（或call）重新制定一下fn的上下文即可。</p><p><strong>上下文this</strong><br>js的this是很善变的，谁调用它，它就指向谁，所以“上下文”这个词还是很贴切的。那么，为什么在2处能够得到正确的this呢？涉及到上下文切换的地方，一共有3处，已在上面代码中标了出来。我总结了一个三步定位this法：</p><p>第一步，是否立即执行？如果是，跳过第二步！</p><p>第二步，如果不是立即执行，它一定会被转交给某个对象保管，看它被挂在了哪，或者说转交给了谁！</p><p>第三步，这个执行函数挂在谁身上，谁就是this！</p><p>我们来实践一下。</p><p>第1处：</p><p>我们需要先简单处理一下，debounce其实是挂在window全局上的，写全应该是window.debounce(handler, 500)。第一步，是立即执行的！跳过第二步！第三步，debounce挂在window上！所以this指向是window。</p><p>第2处：</p><p>先简单处理下，debounce(handler, 500)的执行结果是返回一个函数，所以下面两段代码基本上可以视为等价的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'input'</span>).addEventListener(<span class="string">'input'</span>, debounce(handler, <span class="number">500</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'input'</span>).addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 闭包</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> ctx = <span class="keyword">this</span>; <span class="comment">// this上下文</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  clearTimeout(timer);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    fn.apply(ctx); <span class="comment">// this上下文调用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  &#125;, delay);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>这么一看，就具体多了。第一步，不是立即执行；第二步，addEventListener是挂在dom上的方法，所以addEventListener只能把回调挂在dom上，可以理解成input.handler = function(){}，等行为被触发时才执行。所以它被转交给了input；第三步，handler挂在input上，所以this指向了input！</p><p>第3处：</p><p>setTimeout是挂在window上的，所以在执行的时候，实际上是window.setTimeout()。我们用伪代码模拟下setTimeout的实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.setTimeout = <span class="function"><span class="keyword">function</span>(<span class="params">fn, delay</span>)</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 因为不能立即执行，所以要找个地方挂fn，就只能把fn转交给它的主子window</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 假设window存fn的属性叫setTimeoutHandler，与input.handler类似</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">window</span>.setTimeoutHandler = fn;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 等待delay毫秒……</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">window</span>.setTimeoutHandler(); <span class="comment">// 执行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>仔细理解一下，可以发现这里跟dom的回调非常像。第一步，不是立即执行；第二步，setTimeout是挂在window上的方法，所以只能转交给window的某个方法保管（假设叫setTimeoutHandler，名字不重要）；第三步，setTimeoutHandler挂在window上，所以this指向window。</p><p>稳妥起见，我们再加一个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  test: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">obj.test(); <span class="comment">// obj</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">setTimeout(obj.test,<span class="number">1000</span>); <span class="comment">// window</span></span></pre></td></tr></table></figure><p>第一个很简单，立即执行，不用转交。直接可以定位this指向了obj！</p><p>第二个非立即执行，虽然传进去的是obj.test，实际上需要转交给window.setTimeoutHandler保管，即window.setTimeoutHandler = obj.test。所以this指向的是window！</p><p>总之，碰到非立即执行的函数，需要仔细分析一下。</p><p><strong>debounce最终版</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> timer;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 闭包</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> ctx = <span class="keyword">this</span>; <span class="comment">// this上下文</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    clearTimeout(timer);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      fn.apply(ctx, args); <span class="comment">// this上下文调用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;, delay);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>最后，我们再把传参也解决一下（arguments是默认的存储所有传参的类数组对象，时间关系这里就不展开了），完成。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>debounce是一个很实用也很经典的功能函数，每一行代码都有丰富的内涵。与其类似的还有throttle，可以查查巩固一下。本文主要是想借debounce这个实用的函数引出js当中的两个比较难理解，的点this和闭包。说实话，这两个点想讲明白很难，更靠谱的办法是用大量的实践来消化。本文算是给各位同学种下一颗种子，以后碰到类似的情况时，能够很快的想起本文的内容，帮助自己更好的理解与感悟。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;防抖函数中的闭包&quot;&gt;&lt;a href=&quot;#防抖函数中的闭包&quot; class=&quot;headerlink&quot; title=&quot;防抖函数中的闭包&quot;&gt;&lt;/a&gt;防抖函数中的闭包&lt;/h2&gt;&lt;p&gt;复制一份防止丢失&lt;/p&gt;
&lt;h3 id=&quot;debounce函数&quot;&gt;&lt;a href=&quot;#debounce函数&quot; class=&quot;headerlink&quot; title=&quot;debounce函数&quot;&gt;&lt;/a&gt;debounce函数&lt;/h3&gt;&lt;p&gt;debounce函数，俗称防抖函数，专治input、resize、scroll等频繁操作打爆浏览器或其他资源。前端面试几乎必考，当然肯定会做一些变化。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; handler = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now());&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;).addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;, handler);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;现状&quot;&gt;&lt;a href=&quot;#现状&quot; class=&quot;headerlink&quot; title=&quot;现状&quot;&gt;&lt;/a&gt;现状&lt;/h3&gt;&lt;p&gt;用户每次输入操作都会触发handler调用，性能浪费。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="闭包" scheme="http://lenmon54231.github.io.git/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>设置GitHub</title>
    <link href="http://lenmon54231.github.io.git/2019/12/02/vue%E4%B8%AD%E5%BC%95%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <id>http://lenmon54231.github.io.git/2019/12/02/vue%E4%B8%AD%E5%BC%95%E5%85%A5%E5%9B%BE%E7%89%87/</id>
    <published>2019-12-02T09:16:26.000Z</published>
    <updated>2019-12-04T16:59:39.730Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="Vue中引入图片失效"><a href="#Vue中引入图片失效" class="headerlink" title="Vue中引入图片失效"></a>Vue中引入图片失效</h2><h2 id="引入图片"><a href="#引入图片" class="headerlink" title="引入图片"></a>引入图片</h2><p>自己本地开发引入图片可以选择相对路径或者绝对路径，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"../images/1.png"</span>&gt;</span></span></pre></td></tr></table></figure><p>这样是可以在网页中显示的，或者将图片放在网络存储中，引用网络地址。</p><p>但是，在使用Vue进行开发的时候，有遇到一个问题：本地引入图片生效，但是使用Js去替换图片的时候，使用相对路径，就不能正确的生成图片，查阅资料发现了需要更换引入方式。</p><a id="more"></a><h3 id="想要实现的样式"><a href="#想要实现的样式" class="headerlink" title="想要实现的样式"></a>想要实现的样式</h3><p>密码的显示和隐藏样式：</p><p><strong>显示：</strong></p><p><img src="https://limengtupian.oss-cn-beijing.aliyuncs.com/open.png" alt="open"></p><p><strong>隐藏:</strong></p><p><img src="https://limengtupian.oss-cn-beijing.aliyuncs.com/close.png" alt="close"></p><h2 id="在Vue中引入图片"><a href="#在Vue中引入图片" class="headerlink" title="在Vue中引入图片"></a>在Vue中引入图片</h2><ol><li><p>直接使用相对路径</p><p>直接使用相对路径生成的html里面，可以发现在引用的图片地址处，会被加上一串唯一编码。</p><p>如果用JS去修改img的src，生成的图片地址里面是没有编码的，所以不会正确的加载地址。</p></li><li><p>正确的引入</p><ol><li><p><strong>html</strong></p><p>img直接引入地址，需要在src上加上v-bind，也就是冒号：</p><p><img src="https://limengtupian.oss-cn-beijing.aliyuncs.com/html.png" alt="html"></p></li><li><p><strong>data</strong></p><p>data对应的应该有该名称的对应地址属性</p><p><img src="https://limengtupian.oss-cn-beijing.aliyuncs.com/icon.png" alt="data"></p></li><li><p><strong>methds</strong></p><p>直接在方法里面去让src的属性等于对应的src名称</p><p><img src="https://limengtupian.oss-cn-beijing.aliyuncs.com/function.png" alt="methds"></p></li></ol></li></ol><p>这样，可以正确的显示图片，从F12解析可以看到，图片的地址都是已经加上了编码。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


&lt;h2 id=&quot;Vue中引入图片失效&quot;&gt;&lt;a href=&quot;#Vue中引入图片失效&quot; class=&quot;headerlink&quot; title=&quot;Vue中引入图片失效&quot;&gt;&lt;/a&gt;Vue中引入图片失效&lt;/h2&gt;&lt;h2 id=&quot;引入图片&quot;&gt;&lt;a href=&quot;#引入图片&quot; class=&quot;headerlink&quot; title=&quot;引入图片&quot;&gt;&lt;/a&gt;引入图片&lt;/h2&gt;&lt;p&gt;自己本地开发引入图片可以选择相对路径或者绝对路径，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;:src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;../images/1.png&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这样是可以在网页中显示的，或者将图片放在网络存储中，引用网络地址。&lt;/p&gt;
&lt;p&gt;但是，在使用Vue进行开发的时候，有遇到一个问题：本地引入图片生效，但是使用Js去替换图片的时候，使用相对路径，就不能正确的生成图片，查阅资料发现了需要更换引入方式。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="github" scheme="http://lenmon54231.github.io.git/tags/github/"/>
    
      <category term="hexo" scheme="http://lenmon54231.github.io.git/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>vue环境搭建</title>
    <link href="http://lenmon54231.github.io.git/2019/12/02/vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://lenmon54231.github.io.git/2019/12/02/vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2019-12-02T09:16:26.000Z</published>
    <updated>2019-12-03T10:18:23.802Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="vue的环境搭建"><a href="#vue的环境搭建" class="headerlink" title="vue的环境搭建"></a>vue的环境搭建</h2><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>一般来讲, 可以用以下三种方式安装 Node.js：</p><ul><li>通过安装包安装(Windows 和 Mac 用户推荐)</li><li>通过源码编译安装(Linux用户推荐)</li><li>在 Linux 下可以通过 yum|apt-get 安装</li></ul><ol><li><p>通过安装包安装：</p></li><li><p>源码编译安装：</p><a id="more"></a><p>Linux用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">curl -O https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v6.10.3&#x2F;node-v6.10.3.tar.gz</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">tar -xzvf node-v6.10.3.tar.gz</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">cd  node-v6.10.3</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">.&#x2F;configure</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">make</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">make install</span></pre></td></tr></table></figure></li></ol><h3 id="安装cnpm镜像（可选择）"><a href="#安装cnpm镜像（可选择）" class="headerlink" title="安装cnpm镜像（可选择）"></a>安装cnpm镜像（可选择）</h3><p>   <a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝 NPM 镜像</a>是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">cnpm install [name]</span></pre></td></tr></table></figure><h3 id="使用vue-cli"><a href="#使用vue-cli" class="headerlink" title="使用vue-cli"></a>使用vue-cli</h3><ol><li><p>安装</p><p>如果用npm下载速度慢，可以使用cnpm.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span></pre></td></tr></table></figure></li><li><p>init初始模板</p><p>目前可用的模板包括：</p><ul><li><p><a href="https://github.com/vuejs-templates/browserify" target="_blank" rel="noopener">browserify</a>–全功能的Browserify + vueify，包括热加载，静态检测，单元测试</p></li><li><p><a href="https://github.com/vuejs-templates/browserify-simple" target="_blank" rel="noopener">browserify-simple</a>–一个简易的Browserify + vueify，以便于快速开始。</p></li><li><p><a href="https://github.com/vuejs-templates/webpack" target="_blank" rel="noopener">webpack</a>–全功能的Webpack + vueify，包括热加载，静态检测，单元测试</p></li><li><p><a href="https://github.com/vuejs-templates/webpack-simple" target="_blank" rel="noopener">webpack-simple</a>–一个简易的Webpack + vueify，以便于快速开始。</p></li><li><p><a href="https://github.com/vuejs-templates/simple" target="_blank" rel="noopener">simple</a> - 单个HTML文件中最简单的Vue设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">vue init &lt;template-name&gt; &lt;project-name&gt;</span></pre></td></tr></table></figure></li></ul></li><li><p>运行项目</p><ol><li>我们的项目选择webpack,使用以下命令:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">vue init webpack vue-todos</span></pre></td></tr></table></figure><ol start="2"><li><p>输入下面的命令就可以运行这个项目了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cd vue-todos</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">npm install</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">npm run dev</span></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


&lt;h2 id=&quot;vue的环境搭建&quot;&gt;&lt;a href=&quot;#vue的环境搭建&quot; class=&quot;headerlink&quot; title=&quot;vue的环境搭建&quot;&gt;&lt;/a&gt;vue的环境搭建&lt;/h2&gt;&lt;h3 id=&quot;安装node-js&quot;&gt;&lt;a href=&quot;#安装node-js&quot; class=&quot;headerlink&quot; title=&quot;安装node.js&quot;&gt;&lt;/a&gt;安装node.js&lt;/h3&gt;&lt;p&gt;一般来讲, 可以用以下三种方式安装 Node.js：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过安装包安装(Windows 和 Mac 用户推荐)&lt;/li&gt;
&lt;li&gt;通过源码编译安装(Linux用户推荐)&lt;/li&gt;
&lt;li&gt;在 Linux 下可以通过 yum|apt-get 安装&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;通过安装包安装：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;源码编译安装：&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="vue" scheme="http://lenmon54231.github.io.git/tags/vue/"/>
    
      <category term="vue-cli" scheme="http://lenmon54231.github.io.git/tags/vue-cli/"/>
    
      <category term="nodejs" scheme="http://lenmon54231.github.io.git/tags/nodejs/"/>
    
      <category term="npm" scheme="http://lenmon54231.github.io.git/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>函数防抖和节流</title>
    <link href="http://lenmon54231.github.io.git/2019/12/02/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/"/>
    <id>http://lenmon54231.github.io.git/2019/12/02/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/</id>
    <published>2019-12-02T09:16:26.000Z</published>
    <updated>2019-12-20T09:57:52.347Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">## 函数防抖和节流<h3 id="函数节流和防抖"><a href="#函数节流和防抖" class="headerlink" title="函数节流和防抖"></a>函数节流和防抖</h3><p>函数节流：<strong>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数</strong></p><p>函数防抖：<strong>所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间</strong></p><a id="more"></a><h3 id="防抖例子"><a href="#防抖例子" class="headerlink" title="防抖例子"></a>防抖例子</h3><p>防抖函数分为非立即执行版和立即执行版。</p><p><strong>主要实现方式就是通过执行settimeout这个函数，每次触发延迟对应时间后再执行内部函数</strong></p><ul><li>非立即执行防抖函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">let</span> timeout;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (timeout) clearTimeout(timeout);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            func.apply(context, args)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;, wait);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">content.onmousemove = debounce(count,<span class="number">1000</span>); <span class="comment">//调用函数</span></span></pre></td></tr></table></figure><ul><li>立即执行防抖函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func,wait</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">let</span> timeout;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (timeout) clearTimeout(timeout);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> callNow = !timeout;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            timeout = <span class="literal">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#125;, wait)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (callNow) func.apply(context, args)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">content.onmousemove = debounce(count,<span class="number">1000</span>); <span class="comment">//调用函数</span></span></pre></td></tr></table></figure><ul><li>双剑合璧版：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func,wait,immediate</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">let</span> timeout;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (timeout) clearTimeout(timeout);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (immediate) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">var</span> callNow = !timeout;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                timeout = <span class="literal">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            &#125;, wait)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (callNow) func.apply(context, args)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                func.apply(context, args)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            &#125;, wait);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="节流例子"><a href="#节流例子" class="headerlink" title="节流例子"></a>节流例子</h3><p>对于节流，一般有两种方式可以实现，分别是时间戳版和定时器版</p><p><strong>主要实现是通过定位时间差来判断是否执行函数</strong></p><ul><li><p>时间戳</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">let</span> previous = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> now = <span class="built_in">Date</span>.now();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            func.apply(context, args);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            previous = now;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">content.onmousemove = throttle(count,<span class="number">1000</span>);</span></pre></td></tr></table></figure></li><li><p>定时器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">let</span> timeout;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!timeout) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                timeout = <span class="literal">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                func.apply(context, args)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            &#125;, wait)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">content.onmousemove = throttle(count,<span class="number">1000</span>);</span></pre></td></tr></table></figure></li><li><p>合并版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait ,type</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span>(type===<span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> previous = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type===<span class="number">2</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> timeout;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(type===<span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">let</span> now = <span class="built_in">Date</span>.now();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                func.apply(context, args);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                previous = now;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type===<span class="number">2</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (!timeout) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                    timeout = <span class="literal">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                    func.apply(context, args)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                &#125;, wait)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>可以看到 ：<strong>非立即执行防抖函数</strong> 和 <strong>定时器版节流函数</strong> 比较相似。</p><blockquote><p>主要区别是其中的判断条件：</p><ol><li>节流函数是<strong>判断执行settime函数没有执行，则让settime函数执行，达到一定时间内只执行一次的目的</strong>。</li><li>防抖函数是<strong>判断settime函数执行，则让settime函数再执行一次，达到每次触发都延迟</strong></li></ol></blockquote><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>防抖是维护一个计时器，规定在delay时间后触发函数，但是在delay时间内再次触发的话，都会清除当前的 timer 然后重新设置超时调用，即重新计时。这样一来，只有最后一次操作能被触发。</p><p>节流是通过判断是否到达一定时间来触发函数，若没到规定时间则使用计时器延后，而下一次事件则会重新设定计时器。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## 函数防抖和节流

&lt;h3 id=&quot;函数节流和防抖&quot;&gt;&lt;a href=&quot;#函数节流和防抖&quot; class=&quot;headerlink&quot; title=&quot;函数节流和防抖&quot;&gt;&lt;/a&gt;函数节流和防抖&lt;/h3&gt;&lt;p&gt;函数节流：&lt;strong&gt;所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;函数防抖：&lt;strong&gt;所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="节流" scheme="http://lenmon54231.github.io.git/tags/%E8%8A%82%E6%B5%81/"/>
    
      <category term="防抖" scheme="http://lenmon54231.github.io.git/tags/%E9%98%B2%E6%8A%96/"/>
    
  </entry>
  
  <entry>
    <title>flex设置1和auto的区别</title>
    <link href="http://lenmon54231.github.io.git/2019/12/02/flex%E8%AE%BE%E7%BD%AE1%E5%92%8Cauto%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://lenmon54231.github.io.git/2019/12/02/flex%E8%AE%BE%E7%BD%AE1%E5%92%8Cauto%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2019-12-02T09:16:26.000Z</published>
    <updated>2019-12-03T11:45:22.418Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="flex设置成1和auto有什么区别"><a href="#flex设置成1和auto有什么区别" class="headerlink" title="flex设置成1和auto有什么区别"></a>flex设置成1和auto有什么区别</h2><h3 id="flex的取值"><a href="#flex的取值" class="headerlink" title="flex的取值"></a>flex的取值</h3><p>首先明确一点是， <code>flex</code> 是 <code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>的缩写。<code>flex</code> 的默认值是以上三个属性值的组合。</p><p>那么，flex：1；和flex：auto；有对应的全写如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.item &#123;flex: auto;&#125;</span></pre></td></tr></table></figure><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.item &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    flex-grow: 1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    flex-shrink: 1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    flex-basis: auto;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.item &#123;flex: 1;&#125;</span></pre></td></tr></table></figure><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.item &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    flex-grow: 1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    flex-shrink: 1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    flex-basis: 0%;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></blockquote><p>这三个缩写代表什么意思呢？</p><a id="more"></a><ul><li>flex-shrink属性指定了flex元素的收缩规则。flex元素仅在交替宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据flex-shrink的值。</li><li>flex-grow属性用于设置或检索弹性盒子的扩展比率。</li><li><code>flex-basis</code> 规定的是子元素的基准值。所以是否溢出的计算与此属性息息相关。<code>flex-basis</code> 规定的范围取决于 <code>box-sizing</code>。这里主要讨论以下 <code>flex-basis</code> 的取值情况：<ol><li><code>auto</code>：首先检索该子元素的主尺寸，如果主尺寸不为 <code>auto</code>，则使用值采取主尺寸之值；如果也是 <code>auto</code>，则使用值为 <code>content</code>。</li><li><code>content</code>：指根据该子元素的内容自动布局。有的用户代理没有实现取 <code>content</code> 值，等效的替代方案是 <code>flex-basis</code> 和主尺寸都取 <code>auto</code>。</li><li>百分比：根据其包含块（即伸缩父容器）的主尺寸计算。如果包含块的主尺寸未定义（即父容器的主尺寸取决于子元素），则计算结果和设为 <code>auto</code> 一样。</li></ol></li></ul><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="selector-class">.parent</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">display</span>: flex;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">width</span>: <span class="number">600px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="selector-class">.parent</span> &gt; <span class="selector-tag">div</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="selector-class">.item-1</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">width</span>: <span class="number">140px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">flex</span>: <span class="number">2</span> <span class="number">1</span> <span class="number">0%</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">background</span>: blue;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="selector-class">.item-2</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">flex</span>: <span class="number">2</span> <span class="number">1</span> auto;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">background</span>: darkblue;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="selector-class">.item-3</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> <span class="number">200px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">background</span>: lightblue;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&lt;/style&gt;</span></pre></td></tr></table></figure><p>子元素的总基准值是：.item-1:0% + item-2:auto + .item-3:200px = 300px，其中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">- 0% 即 0 宽度</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">- auto 对应取主尺寸即 100px</span></pre></td></tr></table></figure><p>故剩余空间为 600px - 300px = 300px</p><p>有剩余空间，需要分配剩余空间，需要flex-grow，就是flex:2,lex:2,lex:1;</p><p>剩余空间分配如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">- item-1 和 item-2 各分配 2&#x2F;5，各得 120px</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">- item-3 分配 1&#x2F;5，得 60px</span></pre></td></tr></table></figure><p>各项目最终宽度为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">- item-1 &#x3D; 0% + 120px &#x3D; 120px</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">- item-2 &#x3D; auto + 120px &#x3D; 220px</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">- item-3 &#x3D; 200px + 60px &#x3D; 260px</span></pre></td></tr></table></figure><p><strong><em>注意</em></strong></p><ul><li>当 item-1 基准值取 0% 的时候，是把该项目视为零尺寸的，故即便声明其尺寸为 140px，也并没有什么用，形同虚设</li><li>而 item-2 基准值取 <code>auto</code> 的时候，根据规则基准值使用值是主尺寸值即 100px，故这 100px 不会纳入剩余空间</li></ul><h3 id="全部设置"><a href="#全部设置" class="headerlink" title="全部设置"></a>全部设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.item &#123;flex: 2333 3222 234px;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">.item &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    flex-grow: 2333;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    flex-shrink: 3222;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    flex-basis: 234px;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>当 <code>flex</code> 取值为 <code>none</code>，则计算值为 0 0 auto，如下是等同的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.item &#123;flex: none;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">.item &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    flex-grow: 0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    flex-shrink: 0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    flex-basis: auto;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>当 <code>flex</code> 取值为 <code>auto</code>，则计算值为 1 1 auto，如下是等同的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.item &#123;flex: auto;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">.item &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    flex-grow: 1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    flex-shrink: 1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    flex-basis: auto;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>当 <code>flex</code> 取值为一个非负数字，则该数字为 <code>flex-grow</code> 值，<code>flex-shrink</code> 取 1，<code>flex-basis</code> 取 0%，如下是等同的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.item &#123;flex: 1;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">.item &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    flex-grow: 1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    flex-shrink: 1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    flex-basis: 0%;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>当 <code>flex</code> 取值为一个长度或百分比，则视为 <code>flex-basis</code> 值，<code>flex-grow</code> 取 1，<code>flex-shrink</code> 取 1，有如下等同情况（注意 0% 是一个百分比而不是一个非负数字）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.item-1 &#123;flex: 0%;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">.item-1 &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    flex-grow: 1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    flex-shrink: 1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    flex-basis: 0%;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">.item-2 &#123;flex: 24px;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">.item-1 &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    flex-grow: 1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    flex-shrink: 1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    flex-basis: 24px;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>当 <code>flex</code> 取值为两个非负数字，则分别视为 <code>flex-grow</code> 和 <code>flex-shrink</code> 的值，<code>flex-basis</code> 取 0%，如下是等同的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.item &#123;flex: 2 3;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">.item &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    flex-grow: 2;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    flex-shrink: 3;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    flex-basis: 0%;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>当 <code>flex</code> 取值为一个非负数字和一个长度或百分比，则分别视为 <code>flex-grow</code> 和 <code>flex-basis</code> 的值，<code>flex-shrink</code> 取 1，如下是等同的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.item &#123;flex: 2333 3222px;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">.item &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    flex-grow: 2333;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    flex-shrink: 1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    flex-basis: 3222px;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;



&lt;h2 id=&quot;flex设置成1和auto有什么区别&quot;&gt;&lt;a href=&quot;#flex设置成1和auto有什么区别&quot; class=&quot;headerlink&quot; title=&quot;flex设置成1和auto有什么区别&quot;&gt;&lt;/a&gt;flex设置成1和auto有什么区别&lt;/h2&gt;&lt;h3 id=&quot;flex的取值&quot;&gt;&lt;a href=&quot;#flex的取值&quot; class=&quot;headerlink&quot; title=&quot;flex的取值&quot;&gt;&lt;/a&gt;flex的取值&lt;/h3&gt;&lt;p&gt;首先明确一点是， &lt;code&gt;flex&lt;/code&gt; 是 &lt;code&gt;flex-grow&lt;/code&gt;、&lt;code&gt;flex-shrink&lt;/code&gt;、&lt;code&gt;flex-basis&lt;/code&gt;的缩写。&lt;code&gt;flex&lt;/code&gt; 的默认值是以上三个属性值的组合。&lt;/p&gt;
&lt;p&gt;那么，flex：1；和flex：auto；有对应的全写如下：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.item &amp;#123;flex: auto;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.item &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    flex-grow: 1;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    flex-shrink: 1;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    flex-basis: auto;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.item &amp;#123;flex: 1;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.item &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    flex-grow: 1;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    flex-shrink: 1;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    flex-basis: 0%;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;p&gt;这三个缩写代表什么意思呢？&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="github" scheme="http://lenmon54231.github.io.git/tags/github/"/>
    
      <category term="hexo" scheme="http://lenmon54231.github.io.git/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>初始模板</title>
    <link href="http://lenmon54231.github.io.git/2019/12/02/%E5%88%9D%E5%A7%8B%E6%A8%A1%E6%9D%BF/"/>
    <id>http://lenmon54231.github.io.git/2019/12/02/%E5%88%9D%E5%A7%8B%E6%A8%A1%E6%9D%BF/</id>
    <published>2019-12-02T09:16:26.000Z</published>
    <updated>2019-12-11T11:19:59.706Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="title"><a href="#title" class="headerlink" title="title"></a>title</h2><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


&lt;h2 id=&quot;title&quot;&gt;&lt;a href=&quot;#title&quot; class=&quot;headerlink&quot; title=&quot;title&quot;&gt;&lt;/a&gt;title&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="github" scheme="http://lenmon54231.github.io.git/tags/github/"/>
    
      <category term="hexo" scheme="http://lenmon54231.github.io.git/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>图片懒加载实现</title>
    <link href="http://lenmon54231.github.io.git/2019/12/02/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>http://lenmon54231.github.io.git/2019/12/02/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</id>
    <published>2019-12-02T09:16:26.000Z</published>
    <updated>2019-12-20T09:58:52.347Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">## 记录图片懒加载的实现<h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p>如果是一个图片较多的网站，比如照片类网站，会涉及到打开网站后，一次性向服务器发送大量请求，所以有需求：当用户需要查看更多图片的时候再进行请求。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li><p>先将img标签的src链接设为同一张图片（比如空白图片），然后给img标签设置自定义属性（比如 data-src）,然后将真正的图片地址存储在data-src中。</p></li><li><p>当JS监听到该图片元素进入可视窗口时，将自定义属性中的地址存储到src属性中。达到懒加载的效果。</p></li></ol><a id="more"></a><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul><li><p>HTML</p><p>img图片引入地址为统一的一张图片，真正的地址存储在data-src中</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://s4.sinaimg.cn/mw690/006uWPTUgy72CNFYNjB93&amp;690"</span> <span class="attr">alt</span>=<span class="string">"1"</span> <span class="attr">data-src</span>=<span class="string">"http://img4.imgtn.bdimg.com/it/u=951914923,777131061&amp;fm=26&amp;gp=0.jpg"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://s4.sinaimg.cn/mw690/006uWPTUgy72CNFYNjB93&amp;690"</span> <span class="attr">alt</span>=<span class="string">"1"</span> <span class="attr">data-src</span>=<span class="string">"http://img1.imgtn.bdimg.com/it/u=637435809,3242058940&amp;fm=26&amp;gp=0.jpg"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://s4.sinaimg.cn/mw690/006uWPTUgy72CNFYNjB93&amp;690"</span> <span class="attr">alt</span>=<span class="string">"1"</span> <span class="attr">data-src</span>=<span class="string">"http://img1.imgtn.bdimg.com/it/u=3990342075,2367006974&amp;fm=200&amp;gp=0.jpg"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://s4.sinaimg.cn/mw690/006uWPTUgy72CNFYNjB93&amp;690"</span> <span class="attr">alt</span>=<span class="string">"1"</span> <span class="attr">data-src</span>=<span class="string">"http://img1.imgtn.bdimg.com/it/u=1813891576,1754763093&amp;fm=26&amp;gp=0.jpg"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://s4.sinaimg.cn/mw690/006uWPTUgy72CNFYNjB93&amp;690"</span> <span class="attr">alt</span>=<span class="string">"1"</span> <span class="attr">data-src</span>=<span class="string">"http://img4.imgtn.bdimg.com/it/u=2539922263,2810970709&amp;fm=200&amp;gp=0.jpg"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure><ul><li><p>CSS</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="selector-class">.container</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">margin</span>:<span class="number">0</span> auto;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="selector-class">.container</span><span class="selector-pseudo">:after</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">content</span>:<span class="string">""</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">display</span>: block;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">clear</span>:both;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="selector-class">.container</span> <span class="selector-tag">img</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">width</span>:<span class="number">50%</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">height</span>:<span class="number">260px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="attribute">float</span>:left;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&lt;/style&gt;</span></pre></td></tr></table></figure></li><li><p>JS</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 一开始没有滚动的时候，出现在视窗中的图片也会加载</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 当页面开始滚动的时候，遍历图片，如果图片出现在视窗中，就加载图片</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> clock; <span class="comment">//函数节流</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    $(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(clock)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            clearTimeout(clock);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        clock = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            start()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &#125;,<span class="number">200</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">         $(<span class="string">'.container img'</span>).not(<span class="string">'[data-isLoading]'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (isShow($(<span class="keyword">this</span>))) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                loadImg($(<span class="keyword">this</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 判断图片是否出现在视窗的函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isShow</span>(<span class="params">$node</span>)</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> $node.offset().top &lt;= $(<span class="built_in">window</span>).height()+$(<span class="built_in">window</span>).scrollTop();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 加载图片的函数，就是把自定义属性data-src 存储的真正的图片地址，赋值给src</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">$img</span>)</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            $img.attr(<span class="string">'src'</span>, $img.attr(<span class="string">'data-src'</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">// 已经加载的图片，我给它设置一个属性，值为1，作为标识</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">// 弄这个的初衷是因为，每次滚动的时候，所有的图片都会遍历一遍，这样有点浪费，所以做个标识，滚动的时候只遍历哪些还没有加载的图片</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">            $img.attr(<span class="string">'data-isLoading'</span>,<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure></li></ul><h3 id="js实现效果"><a href="#js实现效果" class="headerlink" title="js实现效果"></a>js实现效果</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clock; <span class="comment">//函数节流            </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span>(clock)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        clearTimeout(clock);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    clock = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        start()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;,<span class="number">200</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure><p>这里有用到一个节流函数，200ms只执行一次加载图片函数，里面有if的判断条件是延迟函数本身，当settimeout执行时，判断为真，当settimeout不执行，为假。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">     $(<span class="string">'.container img'</span>).not(<span class="string">'[data-isLoading]'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (isShow($(<span class="keyword">this</span>))) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            loadImg($(<span class="keyword">this</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>.not 函数是jq的用法，是将对象循环，并且将符合条件的对象剔除出数组，这里data-isloading在图片的src改变后，后续有将其赋值为1了。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## 记录图片懒加载的实现

&lt;h3 id=&quot;图片懒加载&quot;&gt;&lt;a href=&quot;#图片懒加载&quot; class=&quot;headerlink&quot; title=&quot;图片懒加载&quot;&gt;&lt;/a&gt;图片懒加载&lt;/h3&gt;&lt;p&gt;如果是一个图片较多的网站，比如照片类网站，会涉及到打开网站后，一次性向服务器发送大量请求，所以有需求：当用户需要查看更多图片的时候再进行请求。&lt;/p&gt;
&lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;先将img标签的src链接设为同一张图片（比如空白图片），然后给img标签设置自定义属性（比如 data-src）,然后将真正的图片地址存储在data-src中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当JS监听到该图片元素进入可视窗口时，将自定义属性中的地址存储到src属性中。达到懒加载的效果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="懒加载" scheme="http://lenmon54231.github.io.git/tags/%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="函数节流" scheme="http://lenmon54231.github.io.git/tags/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>圣杯布局的三种实现</title>
    <link href="http://lenmon54231.github.io.git/2019/12/02/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E7%9A%84%E4%B8%89%E7%A7%8D%E5%AE%9E%E7%8E%B0/"/>
    <id>http://lenmon54231.github.io.git/2019/12/02/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E7%9A%84%E4%B8%89%E7%A7%8D%E5%AE%9E%E7%8E%B0/</id>
    <published>2019-12-02T09:16:26.000Z</published>
    <updated>2019-12-03T15:01:43.304Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="圣杯布局的三种实现"><a href="#圣杯布局的三种实现" class="headerlink" title="圣杯布局的三种实现"></a>圣杯布局的三种实现</h2><p>圣杯布局和双飞翼布局一直是前端面试的高频考点，圣杯布局的出现是来自由 Matthew Levine 在 2006 年写的一篇文章 《In Search of the Holy Grail》。 比起双飞翼布局，它的起源不是源于对页面的形象表达。在西方，圣杯是表达“渴求之物”的意思。而双飞翼布局则是源于淘宝的UED，可以说是灵感来自于页面渲染。</p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p>布局形式如下：</p><ul><li>header和footer各自占领屏幕所有宽度，高度固定。</li><li>中间的container是一个三栏布局。</li><li>三栏布局两侧宽度固定不变，中间部分自动填充整个区域。</li><li>中间部分的高度是三栏中最高的区域的高度。<br><img src="https://img-blog.csdnimg.cn/20190118092113972.png" alt="shengbie"><a id="more"></a></li></ul><h3 id="三种实现形式"><a href="#三种实现形式" class="headerlink" title="三种实现形式"></a>三种实现形式</h3><ol><li><p><strong>浮动</strong></p><ol><li><p>设置header，footer高度</p></li><li><p>#container内部子元素有float浮动，所以会导致一些问题，所以添加了overflow：hidden；实际上也可以使用overflow：auto；</p></li><li><p>container左右两边需要留出左右对应的位置，padding-left: 200px;padding-right: 150px;</p></li><li><p>给左右元素设置浮动后，脱离文档流。使用margin-left：-100%；和margin-right：-150px定位到对应的位置。</p><blockquote><p>清除浮动参考:清除浮动</p></blockquote></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>#header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>#footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">min-width</span>: <span class="number">550px</span>;  <span class="comment">/* 2x leftContent width + rightContent width */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">font-weight</span>: bold;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span>, <span class="selector-id">#footer</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(29, 27, 27, 0.726);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">text-align</span>: center;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">line-height</span>: <span class="number">60px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">padding-left</span>: <span class="number">200px</span>;   <span class="comment">/* leftContent width */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">padding-right</span>: <span class="number">150px</span>;  <span class="comment">/* rightContent width */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">overflow</span>: hidden;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> <span class="selector-class">.column</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">position</span>: relative;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">float</span>: left;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">text-align</span>: center;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">line-height</span>: <span class="number">300px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#center</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(206, 201, 201);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#left</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;           <span class="comment">/* leftContent width */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">right</span>: <span class="number">200px</span>;           <span class="comment">/* leftContent width */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(95, 179, 235, 0.972);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#right</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;           <span class="comment">/* rightContent width */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">margin-right</span>: -<span class="number">150px</span>;   <span class="comment">/* rightContent width */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(231, 105, 2);</span></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><strong>flex布局</strong></p><ul><li><p>header和footer设置样式，横向撑满。</p></li><li><p>container中的left、center、right依次排布即可</p></li><li><p>给container设置弹性布局 <code>display: flex;</code></p></li><li><p>left和right区域定宽，center设置 <code>flex: 1;</code> 即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>#header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>#footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">min-width</span>: <span class="number">550px</span>;  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">font-weight</span>: bold;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span>, <span class="selector-id">#footer</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(29, 27, 27, 0.726);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">text-align</span>: center;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">line-height</span>: <span class="number">60px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"> <span class="attribute">display</span>: flex;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> <span class="selector-class">.column</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">text-align</span>: center;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">line-height</span>: <span class="number">300px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#center</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(206, 201, 201);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#left</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;        </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(95, 179, 235, 0.972);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#right</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;           </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(231, 105, 2);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ul></li><li><p><strong>grid布局</strong></p><p>如上图所示，我们把body划分成三行四列的网格，其中有5条列网格线</p><p>给body元素添加display: grid;属性变成一个grid(网格)<br>给header元素设置grid-row: 1; 和 grid-column: 1/5; 意思是占据第一行网格的从第一条列网格线开始到第五条列网格线结束<br>给footer元素设置grid-row: 1; 和 grid-column: 1/5; 意思是占据第三行网格的从第一条列网格线开始到第五条列网格线结束<br>给left元素设置grid-row: 2; 和 grid-column: 1/2; 意思是占据第二行网格的从第一条列网格线开始到第二条列网格线结束<br>给center元素设置grid-row: 2; 和 grid-column: 2/4; 意思是占据第二行网格的从第二条列网格线开始到第四条列网格线结束<br>给right元素设置grid-row: 2; 和 grid-column: 4/5; 意思是占据第二行网格的从第四条列网格线开始到第五条列网格线结束</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>#header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>#footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">min-width</span>: <span class="number">550px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">font-weight</span>: bold;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">display</span>: grid;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"> <span class="selector-id">#header</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"> <span class="selector-id">#footer</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">background</span>: <span class="built_in">rgba</span>(29, 27, 27, 0.726);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">text-align</span>: center;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">height</span>: <span class="number">60px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">line-height</span>: <span class="number">60px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"> <span class="selector-id">#header</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">grid-row</span>: <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">grid-column</span>: <span class="number">1</span>/<span class="number">5</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"> <span class="selector-id">#footer</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">grid-row</span>: <span class="number">3</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">grid-column</span>: <span class="number">1</span>/<span class="number">5</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.column</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">text-align</span>: center;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">height</span>: <span class="number">300px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">line-height</span>: <span class="number">300px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"> <span class="selector-id">#left</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">grid-row</span>: <span class="number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">grid-column</span>: <span class="number">1</span>/<span class="number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">background</span>: <span class="built_in">rgba</span>(95, 179, 235, 0.972);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"> <span class="selector-id">#center</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">grid-row</span>: <span class="number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">grid-column</span>: <span class="number">2</span>/<span class="number">4</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">background</span>: <span class="built_in">rgb</span>(206, 201, 201);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"> <span class="selector-id">#right</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">grid-row</span>: <span class="number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">grid-column</span>: <span class="number">4</span>/<span class="number">5</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">background</span>: <span class="built_in">rgb</span>(231, 105, 2);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr></table></figure></li><li><p>三种实现形式</p><p>三种实现形式内，不考虑兼容性的情况下，<strong><em>flex布局</em></strong>是使用比较广的，浮动的布局相对比较麻烦，需要设定各种margin和padding和position的定位，grid布局属于二维布局，就兼容性来说，还是比flex要差一些。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;圣杯布局的三种实现&quot;&gt;&lt;a href=&quot;#圣杯布局的三种实现&quot; class=&quot;headerlink&quot; title=&quot;圣杯布局的三种实现&quot;&gt;&lt;/a&gt;圣杯布局的三种实现&lt;/h2&gt;&lt;p&gt;圣杯布局和双飞翼布局一直是前端面试的高频考点，圣杯布局的出现是来自由 Matthew Levine 在 2006 年写的一篇文章 《In Search of the Holy Grail》。 比起双飞翼布局，它的起源不是源于对页面的形象表达。在西方，圣杯是表达“渴求之物”的意思。而双飞翼布局则是源于淘宝的UED，可以说是灵感来自于页面渲染。&lt;/p&gt;
&lt;h3 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h3&gt;&lt;p&gt;布局形式如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;header和footer各自占领屏幕所有宽度，高度固定。&lt;/li&gt;
&lt;li&gt;中间的container是一个三栏布局。&lt;/li&gt;
&lt;li&gt;三栏布局两侧宽度固定不变，中间部分自动填充整个区域。&lt;/li&gt;
&lt;li&gt;中间部分的高度是三栏中最高的区域的高度。&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190118092113972.png&quot; alt=&quot;shengbie&quot;&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="圣杯布局" scheme="http://lenmon54231.github.io.git/tags/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/"/>
    
      <category term="float，flex，grid" scheme="http://lenmon54231.github.io.git/tags/float%EF%BC%8Cflex%EF%BC%8Cgrid/"/>
    
  </entry>
  
  <entry>
    <title>Hexo链接网络图片不显示</title>
    <link href="http://lenmon54231.github.io.git/2019/12/02/hexo%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA/"/>
    <id>http://lenmon54231.github.io.git/2019/12/02/hexo%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA/</id>
    <published>2019-12-02T09:16:26.000Z</published>
    <updated>2019-12-03T09:24:47.416Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="Hexo图片不显示"><a href="#Hexo图片不显示" class="headerlink" title="Hexo图片不显示"></a>Hexo图片不显示</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>博客内需要引用一些图片，使用的是阿里云Oss，图片设置的公共读，图片地址从浏览器打开可以直接访问，但是博客内引用不能显示。</p><p><strong>在chrome浏览器中检查会发现有403的错误</strong></p><p><img src="https://limengtupian.oss-cn-beijing.aliyuncs.com/403%E5%9B%BE%E7%89%87.png" alt="403"></p><a id="more"></a><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>方法其实很简单，只需要文章的头部如下图所示位置添加<meta name="referrer" content="no-referrer">这一句话就可以完美解决问题</p><p><img src="https://img-blog.csdnimg.cn/20190721223929809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21xZHhpYW94aWFv,size_16,color_FFFFFF,t_70" alt="referrer"></p><h3 id="referrer是什么"><a href="#referrer是什么" class="headerlink" title="referrer是什么"></a>referrer是什么</h3><p><code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;</code></p><p>referrer是用于追踪用户是从哪个页面跳转过来，js中使用document.referrer来得到值，一般用户做移动端back按钮，如用户通过别人发送时候链接进入页面时，可以隐藏back按钮。</p><p>referrer有五种属性:</p><ul><li><p>No Referrer （永远不做记录）</p></li><li><p>No Referrer When Downgrade（浏览器默认，当降级时候不记录，从https跳转到http）</p></li><li><p>Origin Only（只记录 协议+ host）</p></li><li><p>Origin When Cross-origin（仅在发生跨域访问时记录 协议+host）</p></li><li><p>Unsafe URL（永远记录）</p></li></ul><p><em>参考链接</em> ：[<a href="https://imququ.com/post/referrer-policy.html" target="_blank" rel="noopener">Referrer Policy 介绍</a>]、<a href="http://www.jb51.net/article/117739.htm" target="_blank" rel="noopener">document.referrer的用法详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;Hexo图片不显示&quot;&gt;&lt;a href=&quot;#Hexo图片不显示&quot; class=&quot;headerlink&quot; title=&quot;Hexo图片不显示&quot;&gt;&lt;/a&gt;Hexo图片不显示&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;博客内需要引用一些图片，使用的是阿里云Oss，图片设置的公共读，图片地址从浏览器打开可以直接访问，但是博客内引用不能显示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在chrome浏览器中检查会发现有403的错误&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://limengtupian.oss-cn-beijing.aliyuncs.com/403%E5%9B%BE%E7%89%87.png&quot; alt=&quot;403&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://lenmon54231.github.io.git/tags/hexo/"/>
    
      <category term="图片地址" scheme="http://lenmon54231.github.io.git/tags/%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80/"/>
    
      <category term="refer" scheme="http://lenmon54231.github.io.git/tags/refer/"/>
    
  </entry>
  
  <entry>
    <title>文字图片居中</title>
    <link href="http://lenmon54231.github.io.git/2019/12/02/%E6%96%87%E5%AD%97%E5%9B%BE%E7%89%87%E5%B1%85%E4%B8%AD/"/>
    <id>http://lenmon54231.github.io.git/2019/12/02/%E6%96%87%E5%AD%97%E5%9B%BE%E7%89%87%E5%B1%85%E4%B8%AD/</id>
    <published>2019-12-02T09:16:26.000Z</published>
    <updated>2019-12-03T06:53:12.373Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="CSS实现文字和图片的水平垂直居中"><a href="#CSS实现文字和图片的水平垂直居中" class="headerlink" title="CSS实现文字和图片的水平垂直居中"></a>CSS实现文字和图片的水平垂直居中</h2><p>居中是一开始学习使用css遇到比较多的情况，不同的情况有不同的居中方式，随着前端的规范和写法的进步，有各种各样的方法实现，现在来记录一下。<br>主要有文字、div块级元素和图片的居中，以下分几种情况说明。</p><h3 id="文字居中"><a href="#文字居中" class="headerlink" title="文字居中"></a>文字居中</h3><ol><li>单行文字（多行文字）<ul><li>水平居中<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-align</span>：<span class="selector-tag">center</span></span></pre></td></tr></table></figure></li><li>垂直居中<br>只要height值等于line-height值就ok<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span>&#123;<span class="attribute">height</span>:<span class="number">100px</span>;<span class="attribute">line-height</span>:<span class="number">100px</span>;&#125;</span></pre></td></tr></table></figure><a id="more"></a></li></ul></li><li>多行文字<ul><li>垂直居中<ol><li>高度固定</li></ol> <strong>关键属性：</strong>display:tabel-cell; vertical-align:middle; <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">height</span>:<span class="number">300px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>:<span class="number">200px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span>:middle;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>:table-cell;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="attribute">word-break</span>:break-all;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&lt;/style&gt;</span></pre></td></tr></table></figure><ol start="2"><li>父级元素高度固定，子元素为行内元素</li></ol> <strong>关键属性：</strong>父级:diaplay:tabel; 子集：display:tabel-cell; vertical-align:middle; <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;<span class="selector-tag">div</span>&#123;<span class="attribute">height</span>:<span class="number">300px</span>;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">display</span>:table;<span class="attribute">word-break</span>:break-all;<span class="attribute">background</span>:<span class="number">#666</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span>&#123;<span class="attribute">display</span>:table-cell;<span class="attribute">vertical-align</span>:middle;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;/style&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&lt;span&gt;some things&lt;/span&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&lt;/div&gt;</span></pre></td></tr></table></figure><ol start="3"><li>父级元素高度固定，子元素为块元素且高度固定</li></ol> <strong>关键属性：</strong>定位 + margin-top：负值； <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">height</span>:<span class="number">300px</span>;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">position</span>:relative;<span class="attribute">word-break</span>:break-all;<span class="attribute">background</span>:<span class="number">#666</span>;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">50%</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">height</span>:<span class="number">80px</span>;<span class="attribute">margin-top</span>:-<span class="number">40px</span>;<span class="attribute">background</span>:red;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;/style&gt;     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&lt;p&gt;some things&lt;/p&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&lt;/div&gt;</span></pre></td></tr></table></figure><ol start="4"><li>父级元素高度固定，子元素为块元素且高度不固定</li></ol> <strong>关键属性：</strong>定位 + transform：translateY(-50%); <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;  <span class="comment">/*不加的话会被p或其他标签默认样式影响*/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">height</span>:<span class="number">300px</span>;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">position</span>:relative; <span class="attribute">word-break</span>:break-all;<span class="attribute">background</span>:<span class="number">#666</span>;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">50%</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-50%);&#125;<span class="comment">/*个人建议，被包裹的块标签就不要height，用内容将高度撑开就好*/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;/style&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&lt;p&gt;some things&lt;/p&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&lt;/div&gt;</span></pre></td></tr></table></figure><ol start="5"><li>父子元素高度均固定</li></ol> <strong>关键属性：</strong>定位 + margin：auto； <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">height</span>:<span class="number">300px</span>;<span class="attribute">width</span>:<span class="number">400px</span>;<span class="attribute">position</span>:relative;<span class="attribute">word-break</span>:break-all;<span class="attribute">background</span>:<span class="number">#666</span>;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">bottom</span>:<span class="number">0</span>;<span class="attribute">right</span>:<span class="number">0</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">margin</span>:auto;<span class="attribute">height</span>:<span class="number">80px</span>;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">background</span>:red;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;/style&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&lt;p&gt;some things&lt;/p&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&lt;/div&gt;</span></pre></td></tr></table></figure><h3 id="块级元素居中"><a href="#块级元素居中" class="headerlink" title="块级元素居中"></a>块级元素居中</h3></li></ul></li></ol><ul><li>水平居中<ol><li>行内元素(inline 或 inline-* 元素)<br>此类元素需要水平居中，则父级元素必须是块级元素(block level)，且父级元素上需要这样设置样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> <span class="attribute">text-align</span>: center;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li>块级元素<br>块级元素水平居中，需要设置 margin-left 和 margin-right 为 auto，且需要显示设置宽度，不然就占满整行，就无所谓水平居中了。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> <span class="attribute">width</span>: <span class="number">300px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li>同一行多个块级元素<br>如果是在同一行里需要居中多个块级元素，可以尝试下面的两种方法：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 方法一 */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">text-align</span>: center;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> <span class="selector-tag">div</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">display</span>: inline-block;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 方法二 */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">display</span>: -webkit-box;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">display</span>: -ms-flexbox;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">display</span>: flex;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">-webkit-box-pack</span>: center;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">-ms-flex-pack</span>: center;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">justify-content</span>: center;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ol></li><li>垂直居中<ol><li>元素高度已知<br>知道块元素的高度，那么使用绝对定位和负的 margin 即可实现垂直居中：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> <span class="attribute">position</span>: relative;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> <span class="selector-tag">div</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">position</span>: absolute;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">25px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li>块级元素高度是可变的<br>这个时候就需要用 transform 的Y轴平移来实现了：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">position</span>: relative;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> <span class="selector-tag">div</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">position</span>: absolute;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li>flexbox布局<br>flex主要是考虑布局问题<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">display</span>: flexbox;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">justify-content</span>: center;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">flex-direction</span>: column;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li>块级元素高度不是固定的，且不由内容决定<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">position</span>: relative;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> <span class="selector-tag">div</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">position</span>: absolute;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">top</span>: <span class="number">30%</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">bottom</span>: <span class="number">30%</span>; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ol></li><li>水平垂直居中<ol><li>知道宽高的盒子<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> <span class="attribute">position</span>: realtive;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> <span class="selector-tag">div</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">posotion</span>: absoltue;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">150px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">150px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li>不知道宽高的盒子<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">position</span>: realtive;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> <span class="selector-tag">div</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">posotion</span>: absoltue;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li>flex布局<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">display</span>: flex;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">justify-content</span>: center;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">align-items</span>: center;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;



&lt;h2 id=&quot;CSS实现文字和图片的水平垂直居中&quot;&gt;&lt;a href=&quot;#CSS实现文字和图片的水平垂直居中&quot; class=&quot;headerlink&quot; title=&quot;CSS实现文字和图片的水平垂直居中&quot;&gt;&lt;/a&gt;CSS实现文字和图片的水平垂直居中&lt;/h2&gt;&lt;p&gt;居中是一开始学习使用css遇到比较多的情况，不同的情况有不同的居中方式，随着前端的规范和写法的进步，有各种各样的方法实现，现在来记录一下。&lt;br&gt;主要有文字、div块级元素和图片的居中，以下分几种情况说明。&lt;/p&gt;
&lt;h3 id=&quot;文字居中&quot;&gt;&lt;a href=&quot;#文字居中&quot; class=&quot;headerlink&quot; title=&quot;文字居中&quot;&gt;&lt;/a&gt;文字居中&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;单行文字（多行文字）&lt;ul&gt;
&lt;li&gt;水平居中&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;text-align&lt;/span&gt;：&lt;span class=&quot;selector-tag&quot;&gt;center&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;垂直居中&lt;br&gt;只要height值等于line-height值就ok&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.son&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="position" scheme="http://lenmon54231.github.io.git/tags/position/"/>
    
      <category term="css" scheme="http://lenmon54231.github.io.git/tags/css/"/>
    
      <category term="居中" scheme="http://lenmon54231.github.io.git/tags/%E5%B1%85%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>记录网站功能实现-精灵图</title>
    <link href="http://lenmon54231.github.io.git/2019/12/02/%E8%AE%B0%E5%BD%95%E7%BD%91%E7%AB%99%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0-%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
    <id>http://lenmon54231.github.io.git/2019/12/02/%E8%AE%B0%E5%BD%95%E7%BD%91%E7%AB%99%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0-%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</id>
    <published>2019-12-02T09:16:26.000Z</published>
    <updated>2020-01-04T12:31:46.683Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">## 记录网站功能实现-搜索功能<h3 id="网站搜索功能"><a href="#网站搜索功能" class="headerlink" title="网站搜索功能"></a>网站搜索功能</h3><p>很多的导航网站会再头顶设置不同的搜索引擎的搜索框，提供更方便的搜索功能，如图：</p><p><img src="https://limengtupian.oss-cn-beijing.aliyuncs.com/%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD1.png" alt></p><p>这个实现也不复杂，如下：</p><a id="more"></a><h3 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h3><p>功能的实现也不复杂，是通过一个form，不停的变换form中的action和name去切换不同的搜索引擎的</p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"https://www.baidu.com/s"</span> <span class="attr">target</span>=<span class="string">"__blank"</span> <span class="attr">id</span>=<span class="string">"searchForm"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"searchInput"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"text"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">"请输入要搜索的内容："</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"searchValue"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"word"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">autofocus</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="tag">  /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"搜索"</span> /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">data() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    items: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        text: <span class="string">"谷歌"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        searchUrl: <span class="string">"http://www.google.com.hk/search?q="</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        name: <span class="string">"q"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      &#123; <span class="attr">text</span>: <span class="string">"百度"</span>, <span class="attr">searchUrl</span>: <span class="string">"https://www.baidu.com/s"</span>, <span class="attr">name</span>: <span class="string">"word"</span> &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        text: <span class="string">"搜狗"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        searchUrl: <span class="string">"http://www.sogou.com/web"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        name: <span class="string">"query"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      &#123; <span class="attr">text</span>: <span class="string">"必应"</span>, <span class="attr">searchUrl</span>: <span class="string">"https://cn.bing.com/search"</span>, <span class="attr">name</span>: <span class="string">"q"</span> &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    ],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    checkindex: <span class="number">1</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    searchValue: <span class="string">""</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">isActive(item, index) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">this</span>.checkindex = index;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"searchForm"</span>).action = item.searchUrl;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"searchInput"</span>).name = item.name;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr></table></figure><p>通过v-for去循环data中的items，去生成不同的搜索引擎按钮，点击不同的按钮，去切换form中的action和input中的name就可以实现搜索功能。</p><p>这个其中主要是通过各大搜索引擎提供的地址去操作，例如百度等，已经提供了公共的搜索接口，非常的方便。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## 记录网站功能实现-搜索功能

&lt;h3 id=&quot;网站搜索功能&quot;&gt;&lt;a href=&quot;#网站搜索功能&quot; class=&quot;headerlink&quot; title=&quot;网站搜索功能&quot;&gt;&lt;/a&gt;网站搜索功能&lt;/h3&gt;&lt;p&gt;很多的导航网站会再头顶设置不同的搜索引擎的搜索框，提供更方便的搜索功能，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://limengtupian.oss-cn-beijing.aliyuncs.com/%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;这个实现也不复杂，如下：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="精灵图" scheme="http://lenmon54231.github.io.git/tags/%E7%B2%BE%E7%81%B5%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>记录网站功能-动态生成li</title>
    <link href="http://lenmon54231.github.io.git/2019/12/02/%E8%AE%B0%E5%BD%95%E7%BD%91%E7%AB%99%E5%8A%9F%E8%83%BD-%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90li/"/>
    <id>http://lenmon54231.github.io.git/2019/12/02/%E8%AE%B0%E5%BD%95%E7%BD%91%E7%AB%99%E5%8A%9F%E8%83%BD-%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90li/</id>
    <published>2019-12-02T09:16:26.000Z</published>
    <updated>2019-12-30T08:50:10.645Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="记录网站功能-动态生成li"><a href="#记录网站功能-动态生成li" class="headerlink" title="记录网站功能-动态生成li"></a>记录网站功能-动态生成li</h2><h3 id="动态生成元素"><a href="#动态生成元素" class="headerlink" title="动态生成元素"></a>动态生成元素</h3><p>当获取到电影之后，一页只能显示9个电影，之后的电影则需要通过下方的分页li去显示，不同的种类的电影数量是不一致的，所以对应的下方显示数量li页不一致，所以需要根据电影数量动态生成li。</p><p>全部电影：</p><p><img src="https://limengtupian.oss-cn-beijing.aliyuncs.com/%E5%8A%A8%E6%80%81/%E5%8A%A8%E6%80%811.png" alt></p><p>局部电影：</p><p><img src="https://limengtupian.oss-cn-beijing.aliyuncs.com/%E5%8A%A8%E6%80%81/%E5%8A%A8%E6%80%812.png" alt></p><a id="more"></a><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li><p>逻辑</p><ol><li>通过判断当前类目一共有多少电影去生成对应个数的下方li索引，</li><li>切换前，应当先清除所有的li，然后再生成新的li。</li><li>给每个li绑定一个点击事件，当点击时候，当前显示页面的数组替换成对应序号的数组，</li></ol></li><li><p>代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成下方li列表</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">createLiLists(Lilength) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> that = <span class="keyword">this</span>; <span class="comment">//内部函数中调用函数，用that存储this指向，再调用，that.xxx</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> indexlists = <span class="built_in">document</span>.querySelector(<span class="string">"#indexLists"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> showindex = <span class="built_in">document</span>.querySelector(<span class="string">".showindex"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; Lilength; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> node = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> textIndex = <span class="built_in">document</span>.createTextNode(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    node.appendChild(textIndex);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    indexlists.appendChild(node);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    node.className = <span class="string">"index"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    node.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      that.gotoIndex(<span class="keyword">this</span>.innerText, showindex); <span class="comment">// that调用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">this</span>.liIndexList = Lilength;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  showindex.innerText = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清除li</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">clearLiLists() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// this.liIndexList = Lilength;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> indexlists = <span class="built_in">document</span>.querySelector(<span class="string">"#indexLists"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> liS = indexlists.querySelectorAll(<span class="string">".index"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 清除lis，排他</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = liS.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    indexlists.removeChild(liS[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">gotoIndex(e, showindex) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> index = <span class="built_in">document</span>.querySelectorAll(<span class="string">".index"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// var showindex = document.querySelector(".showindex");</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">this</span>.isLoading = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//单页面应用，定时器并不会自动关闭，需要手动清除</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> out = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.allMovie.length == <span class="number">90</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.liIndexList == <span class="number">11</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.items = <span class="keyword">this</span>.allMovie.slice(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">          <span class="built_in">parseInt</span>(e) * <span class="number">9</span> - <span class="number">9</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">          <span class="built_in">parseInt</span>(e) * <span class="number">9</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">          (<span class="keyword">this</span>.isLoading = <span class="literal">false</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.items = <span class="keyword">this</span>.movieGenres_index_list.slice(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">          <span class="built_in">parseInt</span>(e) * <span class="number">9</span> - <span class="number">9</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">          <span class="built_in">parseInt</span>(e) * <span class="number">9</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">          (<span class="keyword">this</span>.isLoading = <span class="literal">false</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">      clearInterval(out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  &#125;, <span class="number">100</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  showindex.innerText = e;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    index[i].classList.remove(<span class="string">"light"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  index[e - <span class="number">1</span>].classList.add(<span class="string">"light"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr></table></figure></li></ul><ul><li><p>注意点</p><ol><li><p>生成元素后需要添加元素，才能生效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> node = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textIndex = <span class="built_in">document</span>.createTextNode(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">node.appendChild(textIndex);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">indexlists.appendChild(node);</span></pre></td></tr></table></figure><p>这里生成了li和li内部的数字i，然后需要append到父元素indexlists上，才能生效。</p></li><li><p>函数内部调用函数添加事件，使用了that</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> that = <span class="keyword">this</span>; <span class="comment">//内部函数中调用函数，用that存储this指向，再调用，that.xxx</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> node.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  that.gotoIndex(<span class="keyword">this</span>.innerText, showindex); <span class="comment">// that调用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>addEventListener内使用其他函数gotoIndex，直接使用this.gotoIndex不生效，使用that生效。</p></li><li><p>写了一个定时器，判断是否将90部电影循环完毕，再执行绑定点击跳转事件，避免未加载完成90部电影点击无效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> out = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.allMovie.length == <span class="number">90</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.liIndexList == <span class="number">11</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.items = <span class="keyword">this</span>.allMovie.slice(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">          <span class="built_in">parseInt</span>(e) * <span class="number">9</span> - <span class="number">9</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">          <span class="built_in">parseInt</span>(e) * <span class="number">9</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">          (<span class="keyword">this</span>.isLoading = <span class="literal">false</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.items = <span class="keyword">this</span>.movieGenres_index_list.slice(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">          <span class="built_in">parseInt</span>(e) * <span class="number">9</span> - <span class="number">9</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">          <span class="built_in">parseInt</span>(e) * <span class="number">9</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">          (<span class="keyword">this</span>.isLoading = <span class="literal">false</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      clearInterval(out);<span class="comment">//单页面应用，定时器并不会自动关闭，需要手动清除</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  &#125;, <span class="number">100</span>);</span></pre></td></tr></table></figure><p>刚打开页面时候，去给li添加事件，会发现报错，因为此时，还没有获取到全部的电影，所以没有办法执行对应的数字跳转到对应的页面电影。</p><p>所以执行一个定时循环函数去判断电影是不是获取完毕，获取完毕了，再执行添加函数。</p><p>如果是有对应的api数据，则比较方便，只用获取到对应的index去后端请求。</p></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;记录网站功能-动态生成li&quot;&gt;&lt;a href=&quot;#记录网站功能-动态生成li&quot; class=&quot;headerlink&quot; title=&quot;记录网站功能-动态生成li&quot;&gt;&lt;/a&gt;记录网站功能-动态生成li&lt;/h2&gt;&lt;h3 id=&quot;动态生成元素&quot;&gt;&lt;a href=&quot;#动态生成元素&quot; class=&quot;headerlink&quot; title=&quot;动态生成元素&quot;&gt;&lt;/a&gt;动态生成元素&lt;/h3&gt;&lt;p&gt;当获取到电影之后，一页只能显示9个电影，之后的电影则需要通过下方的分页li去显示，不同的种类的电影数量是不一致的，所以对应的下方显示数量li页不一致，所以需要根据电影数量动态生成li。&lt;/p&gt;
&lt;p&gt;全部电影：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://limengtupian.oss-cn-beijing.aliyuncs.com/%E5%8A%A8%E6%80%81/%E5%8A%A8%E6%80%811.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;局部电影：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://limengtupian.oss-cn-beijing.aliyuncs.com/%E5%8A%A8%E6%80%81/%E5%8A%A8%E6%80%812.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="动态生成" scheme="http://lenmon54231.github.io.git/tags/%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>移动端优先和桌面端优先</title>
    <link href="http://lenmon54231.github.io.git/2019/12/02/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%BC%98%E5%85%88%E5%92%8C%E6%A1%8C%E9%9D%A2%E7%AB%AF%E4%BC%98%E5%85%88/"/>
    <id>http://lenmon54231.github.io.git/2019/12/02/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%BC%98%E5%85%88%E5%92%8C%E6%A1%8C%E9%9D%A2%E7%AB%AF%E4%BC%98%E5%85%88/</id>
    <published>2019-12-02T09:16:26.000Z</published>
    <updated>2020-01-06T07:47:54.486Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="移动端优先和桌面端优先"><a href="#移动端优先和桌面端优先" class="headerlink" title="移动端优先和桌面端优先"></a>移动端优先和桌面端优先</h2><h3 id="什么是“移动端优先”和“桌面优先”方法"><a href="#什么是“移动端优先”和“桌面优先”方法" class="headerlink" title="什么是“移动端优先”和“桌面优先”方法"></a><strong>什么是“移动端优先”和“桌面优先”方法</strong></h3><p>构建响应式网站是如今前端开发者的必备技能，当我们谈到响应式网站时，“移动端优先”这个词立刻就会出现在脑海中。</p><p>我们知道从“移动端优先”这个角度开始设计很重要，但我们很少谈到使用“移动端优先”的方法来写代码。</p><p>今天，我想与你分享“移动端优先”添加样式的方法，为什么这种方法更好，以及如何发挥它的魔力。</p><a id="more"></a><h3 id="移动端优先和桌面端优先-区别"><a href="#移动端优先和桌面端优先-区别" class="headerlink" title="移动端优先和桌面端优先 区别"></a>移动端优先和桌面端优先 区别</h3><p>“移动端优先”添加样式的方法指的是首先在移动设备上应用样式，然后通过媒体查询在样式表中加入应用于大屏幕的高级样式和其他覆盖样式。</p><p>这个方法使用min-width媒体查询。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个样式在0px到600px应用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">body &#123; <span class="attr">background</span>: red; &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个样式在大于600px时应用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">@media (min-width: <span class="number">600</span>px) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    body &#123; <span class="attr">background</span>: green; &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>另一方面，“桌面优先”添加样式的方法指的是首先在桌面设备上应用样式，然后通过媒体查询在样式表中加入应用于小屏幕的高级样式和其他覆盖样式。</p><p>这个方法使用max-width媒体查询。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个样式在大于600px时应用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">body &#123; <span class="attr">background</span>: green; &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个样式在0px到600px应用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">@media (max-width: <span class="number">600</span>px) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    body &#123; <span class="attr">background</span>: red; &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="为什么是移动端优先？"><a href="#为什么是移动端优先？" class="headerlink" title="为什么是移动端优先？"></a>为什么是移动端优先？</h3><ul><li><p>为大屏幕编写的代码通常会比为小屏幕编写的代码更复杂，所以编写“移动端优先”代码可以简化你的代码。</p></li><li><p>设想这样一个场景，你的网站有一个“内容-边栏”布局，.content在移动端占会100%的宽度，在桌面则占60%的宽度。</p><p><img src="https://zellwk.com/images/2014/12/mw-5.png" alt></p></li></ul><p>移动端代码为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.content &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 为小屏幕设置属性</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 这里不需要设置任何属性，因为我们可以使用默认样式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 为大屏幕设置属性</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    @media (min-width: <span class="number">800</span>px) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        float: left;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        width: <span class="number">60</span>%;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>桌面端代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.content &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 为大屏幕设置属性</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    float: left;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    width: <span class="number">60</span>%;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 为小屏幕设置属性</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 注意我们需要重写两个默认属性才能使这个布局正常显示</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    @media (max-width: <span class="number">800</span>px) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        float: none;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        width: <span class="number">100</span>%;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><ul><li><strong>这里的主要区别就是移动端的布局更多的情况是占用屏幕较大的布局，比如都是100%的占用，可以通过继承直接生成对应的布局。</strong></li></ul><h3 id="结合max-width去使用"><a href="#结合max-width去使用" class="headerlink" title="结合max-width去使用"></a>结合max-width去使用</h3><ul><li><p>当你的样式再不同的尺寸下都都不同的显示效果时，也可以通过max-width去终止之前尺寸的布局，节省后续布局的操作。</p><p><img src="https://zellwk.com/images/2014/12/mw-4.png" alt></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.gallery__item &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    float: left;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    margin-right: <span class="number">5</span>%;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    margin-bottom: <span class="number">5</span>%;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    @media (max-width: <span class="number">800</span>px) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        width: <span class="number">30</span>%;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        &amp;:nth-child(<span class="number">3n</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            margin-right: <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// min-width和max-width查询结合使用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    @media (min-width: <span class="number">800</span>px) and (max-width: <span class="number">1200</span>px) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        width: <span class="number">21.25</span>%; <span class="comment">// (100% - 15%) / 4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &amp;:nth-child(<span class="number">4n</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            margin-right: <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    @media (min-width: <span class="number">1200</span>px) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        width: <span class="number">16</span>%; <span class="comment">// (100% - 20%) / 5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        &amp;:nth-child(<span class="number">5n</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            margin-right: <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>建立响应式网站时，min-width媒体查询非常有用，因为它减低了代码复杂度。不过，从上面的例子中可以看出，min-width查询并非所有问题的解决方案，有时在样式表中使用max-width查询也是有益的，它能帮助你保持代码更DRY。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;移动端优先和桌面端优先&quot;&gt;&lt;a href=&quot;#移动端优先和桌面端优先&quot; class=&quot;headerlink&quot; title=&quot;移动端优先和桌面端优先&quot;&gt;&lt;/a&gt;移动端优先和桌面端优先&lt;/h2&gt;&lt;h3 id=&quot;什么是“移动端优先”和“桌面优先”方法&quot;&gt;&lt;a href=&quot;#什么是“移动端优先”和“桌面优先”方法&quot; class=&quot;headerlink&quot; title=&quot;什么是“移动端优先”和“桌面优先”方法&quot;&gt;&lt;/a&gt;&lt;strong&gt;什么是“移动端优先”和“桌面优先”方法&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;构建响应式网站是如今前端开发者的必备技能，当我们谈到响应式网站时，“移动端优先”这个词立刻就会出现在脑海中。&lt;/p&gt;
&lt;p&gt;我们知道从“移动端优先”这个角度开始设计很重要，但我们很少谈到使用“移动端优先”的方法来写代码。&lt;/p&gt;
&lt;p&gt;今天，我想与你分享“移动端优先”添加样式的方法，为什么这种方法更好，以及如何发挥它的魔力。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="移动端" scheme="http://lenmon54231.github.io.git/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="min-width" scheme="http://lenmon54231.github.io.git/tags/min-width/"/>
    
  </entry>
  
  <entry>
    <title>记录网站功能-电影分类</title>
    <link href="http://lenmon54231.github.io.git/2019/12/02/%E8%AE%B0%E5%BD%95%E7%BD%91%E7%AB%99%E5%8A%9F%E8%83%BD-%E7%94%B5%E5%BD%B1%E5%88%86%E7%B1%BB/"/>
    <id>http://lenmon54231.github.io.git/2019/12/02/%E8%AE%B0%E5%BD%95%E7%BD%91%E7%AB%99%E5%8A%9F%E8%83%BD-%E7%94%B5%E5%BD%B1%E5%88%86%E7%B1%BB/</id>
    <published>2019-12-02T09:16:26.000Z</published>
    <updated>2019-12-30T03:24:47.391Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">## 记录网站功能-电影分类<h3 id="电影分类"><a href="#电影分类" class="headerlink" title="电影分类"></a>电影分类</h3><p>通过axios获得到豆瓣top90部电影后，想要在左侧添加一个分类的侧边栏，所以需要对得到的电影进行分类。</p><p>暂时没有找到分类的api接口，只有自己通过js去循环分类出一个新的数组，新数组形式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">movieGenres.push(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  index: nowGenres,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  list: [movieLists[i]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>index:电影的类别（比如动作，冒险，剧情等等），</p><p>list：对应类别中的所有电影。</p><p>movieLists[i]：初始通过axios得到的电影详情信息（初始对象）</p><a id="more"></a><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><ul><li><p>实现逻辑</p><ol><li>获取到全部电影对象</li><li><ol><li>设定一个空数组用来存放分类后的全部电影：movieGenres[]。</li><li>循环全部对象，判断每一部电影的类别是否存在于新数组中，</li><li>存在则，直接添加到对应的类别数组LIst中去，</li><li>不存在，则将对应类别直接添加到新数组中，</li></ol></li></ol></li><li><p>实现代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">formMovieG(movieLists) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> movieGenres = [];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; movieLists.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> nowGenres = movieLists[i].genres[<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (toJudge(nowGenres)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      movieGenres.push(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        index: nowGenres,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        list: [movieLists[i]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; movieGenres.length; j++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (movieGenres[j].index == nowGenres)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">          movieGenres[j].list.push(movieLists[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">toJudge</span>(<span class="params">nowGenres</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; movieGenres.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (movieGenres[i].index == nowGenres) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> movieGenres;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr></table></figure><p>movieLists:全部电影（90部没有分类）</p><p>toJudge（）：判断函数，判断是否存在对应类别 ，存在则返回false，不存在则返回true；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.movieGenres = <span class="keyword">this</span>.formMovieG(movieLists);</span></pre></td></tr></table></figure><p>获取后赋值。</p></li><li><p><em>注意点</em></p><p>新数组的形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">movieGenres.push(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  index: nowGenres,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  *list: [movieLists[i]]*</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>其中list应当为一个数组的形式，因为是多个对象在其中，后续判断类别相同后，需要用push的方法推到list数组中去。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## 记录网站功能-电影分类

&lt;h3 id=&quot;电影分类&quot;&gt;&lt;a href=&quot;#电影分类&quot; class=&quot;headerlink&quot; title=&quot;电影分类&quot;&gt;&lt;/a&gt;电影分类&lt;/h3&gt;&lt;p&gt;通过axios获得到豆瓣top90部电影后，想要在左侧添加一个分类的侧边栏，所以需要对得到的电影进行分类。&lt;/p&gt;
&lt;p&gt;暂时没有找到分类的api接口，只有自己通过js去循环分类出一个新的数组，新数组形式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;movieGenres.push(&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  index: nowGenres,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  list: [movieLists[i]]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;index:电影的类别（比如动作，冒险，剧情等等），&lt;/p&gt;
&lt;p&gt;list：对应类别中的所有电影。&lt;/p&gt;
&lt;p&gt;movieLists[i]：初始通过axios得到的电影详情信息（初始对象）&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="分类" scheme="http://lenmon54231.github.io.git/tags/%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>记录网站功能-购物车</title>
    <link href="http://lenmon54231.github.io.git/2019/12/02/%E8%AE%B0%E5%BD%95%E7%BD%91%E7%AB%99%E5%8A%9F%E8%83%BD-%E8%B4%AD%E7%89%A9%E8%BD%A6/"/>
    <id>http://lenmon54231.github.io.git/2019/12/02/%E8%AE%B0%E5%BD%95%E7%BD%91%E7%AB%99%E5%8A%9F%E8%83%BD-%E8%B4%AD%E7%89%A9%E8%BD%A6/</id>
    <published>2019-12-02T09:16:26.000Z</published>
    <updated>2019-12-30T12:17:13.767Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">## 记录网站功能-购物车<h3 id="网站购物车功能"><a href="#网站购物车功能" class="headerlink" title="网站购物车功能"></a>网站购物车功能</h3><p>需要在两个页面（电影列表和电影详情）去添加一个购物车功能，而且通过购物车可以跳转到支付页面，支付页面中页可以直接修改购物车的电影数量。</p><p>一般去多页面操作同一数据，都会使用一些工具，现在用的是vue-x 。</p><p>传统方法主要是通过父子组件之间的传值来进行操作：</p><ol><li><p>父组件传给子组件的数据</p><ol><li><p>父组件需要在子组件标签处添加一个自定义标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Shop</span> <span class="attr">:number</span>=<span class="string">"allMovie.length"</span>&gt;</span><span class="tag">&lt;/<span class="name">Shop</span>&gt;</span></span></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Shop <span class="keyword">from</span> <span class="string">"@/components/shoppingCar.vue"</span>;</span></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">data() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        allMovie: []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure></li><li><p>子组件需要注册props</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>影库共有&#123;&#123;number&#125;&#125;部电影<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">props:[<span class="string">"number"</span>],</span></pre></td></tr></table></figure></li></ol><p>这样，就可以通过标签的方法，子组件调用父组件处拿到number里的allmovie的length了。</p><a id="more"></a></li><li><p>子组件传给父组件的数据</p><ol><li><p>子组件需要给元素绑定一个事件，通过事件传参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">"toParent()"</span>&gt;</span>点击传值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">methods: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    toParent()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">this</span>.$emit(<span class="string">'sendToFather'</span>,<span class="keyword">this</span>.message)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">data() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     message:&#123;<span class="attr">name</span>:<span class="string">"购物车"</span>,<span class="attr">color</span>:<span class="string">"red"</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr></table></figure></li></ol></li></ol><ol start="2"><li><p>父组件通过调用子组件定义的一个特定名字方法来获得子组件参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Shop</span>  @<span class="attr">sendToFather</span>=<span class="string">"getChild"</span>&gt;</span><span class="tag">&lt;/<span class="name">Shop</span>&gt;</span></span></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">methods: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  getChild(data)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(data);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>控制台会输出子组件的message数组。</p></li></ol><h3 id="购物车功能vue-x实现"><a href="#购物车功能vue-x实现" class="headerlink" title="购物车功能vue-x实现"></a>购物车功能vue-x实现</h3><p>涉及到多个页面操作同一数据源，并且其中有页面不是父子关系。使用vue-x更加便捷</p><ul><li><p>逻辑</p><p>vue-x的使用核心是两个，一个是state，另一个是mutations。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  state: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  mutations: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  actions: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  modules: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure></li></ul><ol><li>state是页面所需要调用的一个数据源，比如我要在购物车中展示的所有电影数组，这个数组可以在购物车和支付页面都显示出来</li><li>mutations是其他页面提交新的数据过来的时候，需要对传递过来的数据做一些操作（比如要添加一些数量表示，要筛选出重复项等等），然后再赋值给state中的数据源，从而更新所有页面的数据。</li></ol><ul><li><p>代码 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  state: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 当前购物车的电影(经过了数量整理)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    carMovie: [],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//数量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    totalNumber: <span class="number">0</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  mutations: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    setShopCar(state, arg) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">//处理数组中的重复项，将重复项剔除，并且account 加一</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arg.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arg.length; j++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">if</span> (i != j &amp;&amp; arg[i].object.title == arg[j].object.title) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            arg.splice(j, <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            j = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            arg[i].account += <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      state.carMovie = arg;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">var</span> argTem = <span class="built_in">JSON</span>.stringify(arg);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">      <span class="built_in">window</span>.localStorage.setItem(<span class="string">'tempMovie'</span>,argTem);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// 电影的数量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">var</span> total = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arg.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        total += arg[i].account;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">      &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      state.totalNumber = total;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  actions: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  modules: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure><p>支付页面中调用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">computed: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  carMovie() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.carMovie;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>支付页面中更新vue-x中state：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">buyTheMovie(item) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// var reg = this.$store.state.buyCarMovieList;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> reg = <span class="keyword">this</span>.$store.state.carMovie;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  reg.push(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    account: <span class="number">1</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    object: item</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">this</span>.$store.commit(<span class="string">"setShopCar"</span>, reg);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr></table></figure></li><li><p>注意</p><ol><li>直接获取state数据，然后修改，这个操作是能够生效的，但是不推荐这个方法，应当所有修改state数据的操作都使用：this.$store.commit(“xxxxx”, xxx)。从而能够保证数据更新的一致性。</li><li>一般调用的时候，涉及到比较复杂的数据，都可以用再computed周期中。</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
## 记录网站功能-购物车

&lt;h3 id=&quot;网站购物车功能&quot;&gt;&lt;a href=&quot;#网站购物车功能&quot; class=&quot;headerlink&quot; title=&quot;网站购物车功能&quot;&gt;&lt;/a&gt;网站购物车功能&lt;/h3&gt;&lt;p&gt;需要在两个页面（电影列表和电影详情）去添加一个购物车功能，而且通过购物车可以跳转到支付页面，支付页面中页可以直接修改购物车的电影数量。&lt;/p&gt;
&lt;p&gt;一般去多页面操作同一数据，都会使用一些工具，现在用的是vue-x 。&lt;/p&gt;
&lt;p&gt;传统方法主要是通过父子组件之间的传值来进行操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;父组件传给子组件的数据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;父组件需要在子组件标签处添加一个自定义标签&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Shop&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;:number&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;allMovie.length&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Shop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Shop &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;@/components/shoppingCar.vue&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;data() &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        allMovie: []&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子组件需要注册props&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h4&lt;/span&gt;&amp;gt;&lt;/span&gt;影库共有&amp;#123;&amp;#123;number&amp;#125;&amp;#125;部电影&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h4&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;props:[&lt;span class=&quot;string&quot;&gt;&quot;number&quot;&lt;/span&gt;],&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样，就可以通过标签的方法，子组件调用父组件处拿到number里的allmovie的length了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="购物车" scheme="http://lenmon54231.github.io.git/tags/%E8%B4%AD%E7%89%A9%E8%BD%A6/"/>
    
  </entry>
  
</feed>
