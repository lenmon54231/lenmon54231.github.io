{"meta":{"title":"Blog|lenMon's","subtitle":"记录博客","description":"HTML，CSS,JAVASCRIPT,前端，Vue","author":"lenMon","url":"http://lenmon54231.github.io.git","root":"/"},"pages":[],"posts":[{"title":"设置GitHub","slug":"初始模板","date":"2019-12-02T09:16:26.000Z","updated":"2019-12-03T11:46:45.500Z","comments":true,"path":"2019/12/02/初始模板/","link":"","permalink":"http://lenmon54231.github.io.git/2019/12/02/%E5%88%9D%E5%A7%8B%E6%A8%A1%E6%9D%BF/","excerpt":"title","text":"title","categories":[],"tags":[{"name":"github","slug":"github","permalink":"http://lenmon54231.github.io.git/tags/github/"},{"name":"hexo","slug":"hexo","permalink":"http://lenmon54231.github.io.git/tags/hexo/"}]},{"title":"flex设置1和auto的区别","slug":"flex设置1和auto的区别","date":"2019-12-02T09:16:26.000Z","updated":"2019-12-03T11:45:22.418Z","comments":true,"path":"2019/12/02/flex设置1和auto的区别/","link":"","permalink":"http://lenmon54231.github.io.git/2019/12/02/flex%E8%AE%BE%E7%BD%AE1%E5%92%8Cauto%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"flex设置成1和auto有什么区别flex的取值首先明确一点是， flex 是 flex-grow、flex-shrink、flex-basis的缩写。flex 的默认值是以上三个属性值的组合。 那么，flex：1；和flex：auto；有对应的全写如下： 1.item &#123;flex: auto;&#125; 1.item &#123;2 flex-grow: 1;3 flex-shrink: 1;4 flex-basis: auto;5&#125; 1.item &#123;flex: 1;&#125; 1.item &#123;2 flex-grow: 1;3 flex-shrink: 1;4 flex-basis: 0%;5&#125; 这三个缩写代表什么意思呢？","text":"flex设置成1和auto有什么区别flex的取值首先明确一点是， flex 是 flex-grow、flex-shrink、flex-basis的缩写。flex 的默认值是以上三个属性值的组合。 那么，flex：1；和flex：auto；有对应的全写如下： 1.item &#123;flex: auto;&#125; 1.item &#123;2 flex-grow: 1;3 flex-shrink: 1;4 flex-basis: auto;5&#125; 1.item &#123;flex: 1;&#125; 1.item &#123;2 flex-grow: 1;3 flex-shrink: 1;4 flex-basis: 0%;5&#125; 这三个缩写代表什么意思呢？ flex-shrink属性指定了flex元素的收缩规则。flex元素仅在交替宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据flex-shrink的值。 flex-grow属性用于设置或检索弹性盒子的扩展比率。 flex-basis 规定的是子元素的基准值。所以是否溢出的计算与此属性息息相关。flex-basis 规定的范围取决于 box-sizing。这里主要讨论以下 flex-basis 的取值情况： auto：首先检索该子元素的主尺寸，如果主尺寸不为 auto，则使用值采取主尺寸之值；如果也是 auto，则使用值为 content。 content：指根据该子元素的内容自动布局。有的用户代理没有实现取 content 值，等效的替代方案是 flex-basis 和主尺寸都取 auto。 百分比：根据其包含块（即伸缩父容器）的主尺寸计算。如果包含块的主尺寸未定义（即父容器的主尺寸取决于子元素），则计算结果和设为 auto 一样。 举个例子1&lt;div class=\"parent\"&gt;2 &lt;div class=\"item-1\"&gt;&lt;/div&gt;3 &lt;div class=\"item-2\"&gt;&lt;/div&gt;4 &lt;div class=\"item-3\"&gt;&lt;/div&gt;5&lt;/div&gt; 1&lt;style type=\"text/css\"&gt;2 .parent &#123;3 display: flex;4 width: 600px;5 &#125;6 .parent &gt; div &#123;7 height: 100px;8 &#125;9 .item-1 &#123;10 width: 140px;11 flex: 2 1 0%;12 background: blue;13 &#125;14 .item-2 &#123;15 width: 100px;16 flex: 2 1 auto;17 background: darkblue;18 &#125;19 .item-3 &#123;20 flex: 1 1 200px;21 background: lightblue;22 &#125;23&lt;/style&gt; 子元素的总基准值是：.item-1:0% + item-2:auto + .item-3:200px = 300px，其中 1- 0% 即 0 宽度2- auto 对应取主尺寸即 100px 故剩余空间为 600px - 300px = 300px 有剩余空间，需要分配剩余空间，需要flex-grow，就是flex:2,lex:2,lex:1; 剩余空间分配如下： 1- item-1 和 item-2 各分配 2&#x2F;5，各得 120px2- item-3 分配 1&#x2F;5，得 60px 各项目最终宽度为： 1- item-1 &#x3D; 0% + 120px &#x3D; 120px2- item-2 &#x3D; auto + 120px &#x3D; 220px3- item-3 &#x3D; 200px + 60px &#x3D; 260px 注意 当 item-1 基准值取 0% 的时候，是把该项目视为零尺寸的，故即便声明其尺寸为 140px，也并没有什么用，形同虚设 而 item-2 基准值取 auto 的时候，根据规则基准值使用值是主尺寸值即 100px，故这 100px 不会纳入剩余空间 全部设置1.item &#123;flex: 2333 3222 234px;&#125;2.item &#123;3 flex-grow: 2333;4 flex-shrink: 3222;5 flex-basis: 234px;6&#125; 当 flex 取值为 none，则计算值为 0 0 auto，如下是等同的： 1.item &#123;flex: none;&#125;2.item &#123;3 flex-grow: 0;4 flex-shrink: 0;5 flex-basis: auto;6&#125; 当 flex 取值为 auto，则计算值为 1 1 auto，如下是等同的： 1.item &#123;flex: auto;&#125;2.item &#123;3 flex-grow: 1;4 flex-shrink: 1;5 flex-basis: auto;6&#125; 当 flex 取值为一个非负数字，则该数字为 flex-grow 值，flex-shrink 取 1，flex-basis 取 0%，如下是等同的： 1.item &#123;flex: 1;&#125;2.item &#123;3 flex-grow: 1;4 flex-shrink: 1;5 flex-basis: 0%;6&#125; 当 flex 取值为一个长度或百分比，则视为 flex-basis 值，flex-grow 取 1，flex-shrink 取 1，有如下等同情况（注意 0% 是一个百分比而不是一个非负数字）： 1.item-1 &#123;flex: 0%;&#125;2.item-1 &#123;3 flex-grow: 1;4 flex-shrink: 1;5 flex-basis: 0%;6&#125;7.item-2 &#123;flex: 24px;&#125;8.item-1 &#123;9 flex-grow: 1;10 flex-shrink: 1;11 flex-basis: 24px;12&#125; 当 flex 取值为两个非负数字，则分别视为 flex-grow 和 flex-shrink 的值，flex-basis 取 0%，如下是等同的： 1.item &#123;flex: 2 3;&#125;2.item &#123;3 flex-grow: 2;4 flex-shrink: 3;5 flex-basis: 0%;6&#125; 当 flex 取值为一个非负数字和一个长度或百分比，则分别视为 flex-grow 和 flex-basis 的值，flex-shrink 取 1，如下是等同的： 1.item &#123;flex: 2333 3222px;&#125;2.item &#123;3 flex-grow: 2333;4 flex-shrink: 1;5 flex-basis: 3222px;6&#125;","categories":[],"tags":[{"name":"github","slug":"github","permalink":"http://lenmon54231.github.io.git/tags/github/"},{"name":"hexo","slug":"hexo","permalink":"http://lenmon54231.github.io.git/tags/hexo/"}]},{"title":"设置GitHub","slug":"设置GitHub","date":"2019-12-02T09:16:26.000Z","updated":"2019-12-03T06:54:53.789Z","comments":true,"path":"2019/12/02/设置GitHub/","link":"","permalink":"http://lenmon54231.github.io.git/2019/12/02/%E8%AE%BE%E7%BD%AEGitHub/","excerpt":"GitHubGitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。 初始设置github记录开始使用GitHub中三点注意： 注册账号会验证邮箱，而163邮箱不能接受验证邮件 注意：注册需要设置邮箱，需要选用qq邮箱或者gmail邮箱，163邮箱发现不能接收到GitHub的邮件！","text":"GitHubGitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。 初始设置github记录开始使用GitHub中三点注意： 注册账号会验证邮箱，而163邮箱不能接受验证邮件 注意：注册需要设置邮箱，需要选用qq邮箱或者gmail邮箱，163邮箱发现不能接收到GitHub的邮件！ 新的库，需要设置sshkeys 检查是否有sshkeys 1~&#x2F;.ssh 创建ssh 首先创建一个SSH，在Git Bash中输入 1$ ssh-keygen -t rsa -C “你的邮箱” 然后他就会显示这两行 1Generating public&#x2F;private rsa key pair.2Enter file in which to save the key (&#x2F;c&#x2F;Users&#x2F;16627&#x2F;.ssh&#x2F;id_rsa): 这是让你输入一个文件名，用于保存刚才生成的 SSH key 代码。如果你不输入，直接回车，那么就会默认生成id_rsa和id_rsa.pub两个秘钥文件（如下提示）。 1Created directory ‘&#x2F;c&#x2F;Users&#x2F;16627&#x2F;.ssh’. 紧接着又会提示你 1Enter passphrase (empty for no passphrase):2Enter same passphrase again: 接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是github管理者的密码），当然你还可以不输入密码，直接按回车。那么fetch和push的时候就不需要输入密码。 已经创建成功 添加ssh到GitHub 按照以下的步骤操作： title随便给他起个名字就好。然后是key，这时候你要打开你刚才在电脑上的SSH key。刚才提示你建立的那段文字有SSH key的地址，按照地址找到你的文件，用记事本打开id_rsa.pub文件，全选其中的内容粘贴到网页的Key中即可。 然后你就会受到建立成功的邮件了。 测试一下ssh key 在git Bash 中输入以下代码： 1ssh -T git@github.com2注意是git@github.com，不是你的邮箱。 然后会提示你： 1The authenticity of host ‘github.com (192.30.255.112)’ can’t be established.2RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.3Are you sure you want to continue connecting (yes&#x2F;no)? 正常提示，你只需要YES就可以。如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码，如果你没设置密码会提示你: 1Warning: Permanently added ‘github.com,192.30.255.112’ (RSA) to the list of known hosts.2Hi “用户名”! You’ve successfully authenticated, but GitHub does not provide shell access. 需要设置config.name和config.email 按照以下的步骤操作 1git config --global user.name &quot;yourname&quot; 设置用户名2git config --global user.email myemail@qq.com 设置用户邮箱3git config --list 查看git设置列表信息4git config user.name 查看用户名","categories":[],"tags":[{"name":"github","slug":"github","permalink":"http://lenmon54231.github.io.git/tags/github/"},{"name":"hexo","slug":"hexo","permalink":"http://lenmon54231.github.io.git/tags/hexo/"}]},{"title":"文字图片居中","slug":"文字图片居中","date":"2019-12-02T09:16:26.000Z","updated":"2019-12-03T06:53:12.373Z","comments":true,"path":"2019/12/02/文字图片居中/","link":"","permalink":"http://lenmon54231.github.io.git/2019/12/02/%E6%96%87%E5%AD%97%E5%9B%BE%E7%89%87%E5%B1%85%E4%B8%AD/","excerpt":"CSS实现文字和图片的水平垂直居中居中是一开始学习使用css遇到比较多的情况，不同的情况有不同的居中方式，随着前端的规范和写法的进步，有各种各样的方法实现，现在来记录一下。主要有文字、div块级元素和图片的居中，以下分几种情况说明。 文字居中 单行文字（多行文字） 水平居中1text-align：center 垂直居中只要height值等于line-height值就ok1.son&#123;height:100px;line-height:100px;&#125;","text":"CSS实现文字和图片的水平垂直居中居中是一开始学习使用css遇到比较多的情况，不同的情况有不同的居中方式，随着前端的规范和写法的进步，有各种各样的方法实现，现在来记录一下。主要有文字、div块级元素和图片的居中，以下分几种情况说明。 文字居中 单行文字（多行文字） 水平居中1text-align：center 垂直居中只要height值等于line-height值就ok1.son&#123;height:100px;line-height:100px;&#125; 多行文字 垂直居中 高度固定 关键属性：display:tabel-cell; vertical-align:middle; 1&lt;style&gt;2div&#123;height:300px;3width:200px;4vertical-align:middle;5display:table-cell;6word-break:break-all;7&#125;8&lt;/style&gt; 父级元素高度固定，子元素为行内元素 关键属性：父级:diaplay:tabel; 子集：display:tabel-cell; vertical-align:middle; 1&lt;style&gt;div&#123;height:300px;width:200px;display:table;word-break:break-all;background:#666;2&#125;3span&#123;display:table-cell;vertical-align:middle;4&#125;5&lt;/style&gt;6&lt;div&gt;7&lt;span&gt;some things&lt;/span&gt;8&lt;/div&gt; 父级元素高度固定，子元素为块元素且高度固定 关键属性：定位 + margin-top：负值； 1&lt;style type=\"text/css\"&gt;2*&#123;margin:0;padding:0;&#125;3div&#123;height:300px;width:200px;position:relative;word-break:break-all;background:#666;&#125;4p&#123;position:absolute;top:50%;left:0;height:80px;margin-top:-40px;background:red;&#125;5&lt;/style&gt; 6&lt;div&gt;7&lt;p&gt;some things&lt;/p&gt;8&lt;/div&gt; 父级元素高度固定，子元素为块元素且高度不固定 关键属性：定位 + transform：translateY(-50%); 1&lt;style&gt;2*&#123;margin:0;padding:0;&#125; /*不加的话会被p或其他标签默认样式影响*/3div&#123;height:300px;width:200px;position:relative; word-break:break-all;background:#666;&#125;4p&#123;position:absolute;top:50%;left:0;transform:translateY(-50%);&#125;/*个人建议，被包裹的块标签就不要height，用内容将高度撑开就好*/5&lt;/style&gt;6&lt;div&gt;7&lt;p&gt;some things&lt;/p&gt;8&lt;/div&gt; 父子元素高度均固定 关键属性：定位 + margin：auto； 1&lt;style&gt;2*&#123;margin:0;padding:0;&#125;3div&#123;height:300px;width:400px;position:relative;word-break:break-all;background:#666;&#125;4p&#123;position:absolute;top:0;bottom:0;right:0;left:0;margin:auto;height:80px;width:200px;background:red;&#125;5&lt;/style&gt;6&lt;div&gt;7&lt;p&gt;some things&lt;/p&gt;8&lt;/div&gt; 块级元素居中 水平居中 行内元素(inline 或 inline-* 元素)此类元素需要水平居中，则父级元素必须是块级元素(block level)，且父级元素上需要这样设置样式：1.parent &#123;2 text-align: center;3&#125; 块级元素块级元素水平居中，需要设置 margin-left 和 margin-right 为 auto，且需要显示设置宽度，不然就占满整行，就无所谓水平居中了。1.block &#123;2 width: 300px;3 margin: 0 auto;4&#125; 同一行多个块级元素如果是在同一行里需要居中多个块级元素，可以尝试下面的两种方法：1/* 方法一 */2.parent &#123;3 text-align: center;4&#125;5.parent div &#123;6 display: inline-block;7&#125;8/* 方法二 */9.parent &#123;10 display: -webkit-box;11 display: -ms-flexbox;12 display: flex;13 -webkit-box-pack: center;14 -ms-flex-pack: center;15 justify-content: center;16&#125; 垂直居中 元素高度已知知道块元素的高度，那么使用绝对定位和负的 margin 即可实现垂直居中：1.parent &#123;2 position: relative;3&#125;4.parent div &#123;5 position: absolute;6 top: 50%;7 height: 50px;8 margin-top: -25px;9&#125; 块级元素高度是可变的这个时候就需要用 transform 的Y轴平移来实现了：1.parent &#123;2 position: relative;3&#125;4.parent div &#123;5 position: absolute;6 top: 50%;7 transform: translateY(-50%);8&#125; flexbox布局flex主要是考虑布局问题1.parent &#123;2 display: flexbox;3 justify-content: center;4 flex-direction: column;5&#125; 块级元素高度不是固定的，且不由内容决定1.parent &#123;2 position: relative;3&#125;4.parent div &#123;5 position: absolute;6 top: 30%;7 bottom: 30%; 8&#125; 水平垂直居中 知道宽高的盒子1.parent &#123;2 position: realtive;3&#125;4.parent div &#123;5 width: 300px;6 height: 300px;7 posotion: absoltue;8 left: 50%;9 top: 50%;10 margin-left: -150px;11 margin-top: -150px;12&#125; 不知道宽高的盒子1.parent &#123;2 position: realtive;3&#125;4.parent div &#123;5 posotion: absoltue;6 left: 50%;7 top: 50%;8 transform: translate(-50%, -50%); 9&#125; flex布局1.parent &#123;2 display: flex;3 justify-content: center;4 align-items: center;5&#125;","categories":[],"tags":[{"name":"position","slug":"position","permalink":"http://lenmon54231.github.io.git/tags/position/"},{"name":"css","slug":"css","permalink":"http://lenmon54231.github.io.git/tags/css/"},{"name":"居中","slug":"居中","permalink":"http://lenmon54231.github.io.git/tags/%E5%B1%85%E4%B8%AD/"}]},{"title":"vue环境搭建","slug":"vue环境搭建","date":"2019-12-02T09:16:26.000Z","updated":"2019-12-03T10:18:23.802Z","comments":true,"path":"2019/12/02/vue环境搭建/","link":"","permalink":"http://lenmon54231.github.io.git/2019/12/02/vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"vue的环境搭建安装node.js一般来讲, 可以用以下三种方式安装 Node.js： 通过安装包安装(Windows 和 Mac 用户推荐) 通过源码编译安装(Linux用户推荐) 在 Linux 下可以通过 yum|apt-get 安装 通过安装包安装： 源码编译安装：","text":"vue的环境搭建安装node.js一般来讲, 可以用以下三种方式安装 Node.js： 通过安装包安装(Windows 和 Mac 用户推荐) 通过源码编译安装(Linux用户推荐) 在 Linux 下可以通过 yum|apt-get 安装 通过安装包安装： 源码编译安装： Linux用户： 1curl -O https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v6.10.3&#x2F;node-v6.10.3.tar.gz2tar -xzvf node-v6.10.3.tar.gz3cd node-v6.10.34.&#x2F;configure5make6make install 安装cnpm镜像（可选择） 淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。 1npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org 2cnpm install [name] 使用vue-cli 安装 如果用npm下载速度慢，可以使用cnpm. 1npm install -g vue-cli init初始模板 目前可用的模板包括： browserify–全功能的Browserify + vueify，包括热加载，静态检测，单元测试 browserify-simple–一个简易的Browserify + vueify，以便于快速开始。 webpack–全功能的Webpack + vueify，包括热加载，静态检测，单元测试 webpack-simple–一个简易的Webpack + vueify，以便于快速开始。 simple - 单个HTML文件中最简单的Vue设置 1vue init &lt;template-name&gt; &lt;project-name&gt; 运行项目 我们的项目选择webpack,使用以下命令: 1vue init webpack vue-todos 输入下面的命令就可以运行这个项目了: 1cd vue-todos2npm install3npm run dev","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://lenmon54231.github.io.git/tags/vue/"},{"name":"vue-cli","slug":"vue-cli","permalink":"http://lenmon54231.github.io.git/tags/vue-cli/"},{"name":"nodejs","slug":"nodejs","permalink":"http://lenmon54231.github.io.git/tags/nodejs/"},{"name":"npm","slug":"npm","permalink":"http://lenmon54231.github.io.git/tags/npm/"}]},{"title":"设置GitHub","slug":"vue中引入图片","date":"2019-12-02T09:16:26.000Z","updated":"2019-12-04T16:59:39.730Z","comments":true,"path":"2019/12/02/vue中引入图片/","link":"","permalink":"http://lenmon54231.github.io.git/2019/12/02/vue%E4%B8%AD%E5%BC%95%E5%85%A5%E5%9B%BE%E7%89%87/","excerpt":"Vue中引入图片失效引入图片自己本地开发引入图片可以选择相对路径或者绝对路径，比如： 1&lt;img :src=\"../images/1.png\"&gt; 这样是可以在网页中显示的，或者将图片放在网络存储中，引用网络地址。 但是，在使用Vue进行开发的时候，有遇到一个问题：本地引入图片生效，但是使用Js去替换图片的时候，使用相对路径，就不能正确的生成图片，查阅资料发现了需要更换引入方式。","text":"Vue中引入图片失效引入图片自己本地开发引入图片可以选择相对路径或者绝对路径，比如： 1&lt;img :src=\"../images/1.png\"&gt; 这样是可以在网页中显示的，或者将图片放在网络存储中，引用网络地址。 但是，在使用Vue进行开发的时候，有遇到一个问题：本地引入图片生效，但是使用Js去替换图片的时候，使用相对路径，就不能正确的生成图片，查阅资料发现了需要更换引入方式。 想要实现的样式密码的显示和隐藏样式： 显示： 隐藏: 在Vue中引入图片 直接使用相对路径 直接使用相对路径生成的html里面，可以发现在引用的图片地址处，会被加上一串唯一编码。 如果用JS去修改img的src，生成的图片地址里面是没有编码的，所以不会正确的加载地址。 正确的引入 html img直接引入地址，需要在src上加上v-bind，也就是冒号： data data对应的应该有该名称的对应地址属性 methds 直接在方法里面去让src的属性等于对应的src名称 这样，可以正确的显示图片，从F12解析可以看到，图片的地址都是已经加上了编码。","categories":[],"tags":[{"name":"github","slug":"github","permalink":"http://lenmon54231.github.io.git/tags/github/"},{"name":"hexo","slug":"hexo","permalink":"http://lenmon54231.github.io.git/tags/hexo/"}]},{"title":"Hexo链接网络图片不显示","slug":"hexo图片不显示","date":"2019-12-02T09:16:26.000Z","updated":"2019-12-03T09:24:47.416Z","comments":true,"path":"2019/12/02/hexo图片不显示/","link":"","permalink":"http://lenmon54231.github.io.git/2019/12/02/hexo%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA/","excerpt":"Hexo图片不显示问题博客内需要引用一些图片，使用的是阿里云Oss，图片设置的公共读，图片地址从浏览器打开可以直接访问，但是博客内引用不能显示。 在chrome浏览器中检查会发现有403的错误","text":"Hexo图片不显示问题博客内需要引用一些图片，使用的是阿里云Oss，图片设置的公共读，图片地址从浏览器打开可以直接访问，但是博客内引用不能显示。 在chrome浏览器中检查会发现有403的错误 解决方法方法其实很简单，只需要文章的头部如下图所示位置添加这一句话就可以完美解决问题 referrer是什么&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt; referrer是用于追踪用户是从哪个页面跳转过来，js中使用document.referrer来得到值，一般用户做移动端back按钮，如用户通过别人发送时候链接进入页面时，可以隐藏back按钮。 referrer有五种属性: No Referrer （永远不做记录） No Referrer When Downgrade（浏览器默认，当降级时候不记录，从https跳转到http） Origin Only（只记录 协议+ host） Origin When Cross-origin（仅在发生跨域访问时记录 协议+host） Unsafe URL（永远记录） 参考链接 ：[Referrer Policy 介绍]、document.referrer的用法详解","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://lenmon54231.github.io.git/tags/hexo/"},{"name":"图片地址","slug":"图片地址","permalink":"http://lenmon54231.github.io.git/tags/%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80/"},{"name":"refer","slug":"refer","permalink":"http://lenmon54231.github.io.git/tags/refer/"}]},{"title":"圣杯布局的三种实现","slug":"圣杯布局的三种实现","date":"2019-12-02T09:16:26.000Z","updated":"2019-12-03T15:01:43.304Z","comments":true,"path":"2019/12/02/圣杯布局的三种实现/","link":"","permalink":"http://lenmon54231.github.io.git/2019/12/02/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E7%9A%84%E4%B8%89%E7%A7%8D%E5%AE%9E%E7%8E%B0/","excerpt":"圣杯布局的三种实现圣杯布局和双飞翼布局一直是前端面试的高频考点，圣杯布局的出现是来自由 Matthew Levine 在 2006 年写的一篇文章 《In Search of the Holy Grail》。 比起双飞翼布局，它的起源不是源于对页面的形象表达。在西方，圣杯是表达“渴求之物”的意思。而双飞翼布局则是源于淘宝的UED，可以说是灵感来自于页面渲染。 效果图布局形式如下： header和footer各自占领屏幕所有宽度，高度固定。 中间的container是一个三栏布局。 三栏布局两侧宽度固定不变，中间部分自动填充整个区域。 中间部分的高度是三栏中最高的区域的高度。","text":"圣杯布局的三种实现圣杯布局和双飞翼布局一直是前端面试的高频考点，圣杯布局的出现是来自由 Matthew Levine 在 2006 年写的一篇文章 《In Search of the Holy Grail》。 比起双飞翼布局，它的起源不是源于对页面的形象表达。在西方，圣杯是表达“渴求之物”的意思。而双飞翼布局则是源于淘宝的UED，可以说是灵感来自于页面渲染。 效果图布局形式如下： header和footer各自占领屏幕所有宽度，高度固定。 中间的container是一个三栏布局。 三栏布局两侧宽度固定不变，中间部分自动填充整个区域。 中间部分的高度是三栏中最高的区域的高度。 三种实现形式 浮动 设置header，footer高度 #container内部子元素有float浮动，所以会导致一些问题，所以添加了overflow：hidden；实际上也可以使用overflow：auto； container左右两边需要留出左右对应的位置，padding-left: 200px;padding-right: 150px; 给左右元素设置浮动后，脱离文档流。使用margin-left：-100%；和margin-right：-150px定位到对应的位置。 清除浮动参考:清除浮动 1&lt;body&gt;2 &lt;div id=\"header\"&gt;#header&lt;/div&gt;3 &lt;div id=\"container\"&gt;4 &lt;div id=\"center\" class=\"column\"&gt;#center&lt;/div&gt;5 &lt;div id=\"left\" class=\"column\"&gt;#left&lt;/div&gt;6 &lt;div id=\"right\" class=\"column\"&gt;#right&lt;/div&gt;7 &lt;/div&gt;8 &lt;div id=\"footer\"&gt;#footer&lt;/div&gt;9&lt;/body&gt; 1 2body &#123;3 min-width: 550px; /* 2x leftContent width + rightContent width */4 font-weight: bold;5 font-size: 20px;6&#125;7 8#header, #footer &#123;9 background: rgba(29, 27, 27, 0.726);10 text-align: center;11 height: 60px;12 line-height: 60px;13&#125;14 15#container &#123;16 padding-left: 200px; /* leftContent width */17 padding-right: 150px; /* rightContent width */18 overflow: hidden;19&#125;20 21#container .column &#123;22 position: relative;23 float: left;24 text-align: center;25 height: 300px;26 line-height: 300px;27&#125;28 29#center &#123;30 width: 100%;31 background: rgb(206, 201, 201);32&#125;33 34#left &#123;35 width: 200px; /* leftContent width */36 right: 200px; /* leftContent width */37 margin-left: -100%;38 background: rgba(95, 179, 235, 0.972);39&#125;40 41#right &#123;42 width: 150px; /* rightContent width */43 margin-right: -150px; /* rightContent width */44 background: rgb(231, 105, 2); flex布局 header和footer设置样式，横向撑满。 container中的left、center、right依次排布即可 给container设置弹性布局 display: flex; left和right区域定宽，center设置 flex: 1; 即可 1&lt;body&gt;2 &lt;div id=\"header\"&gt;#header&lt;/div&gt;3 &lt;div id=\"container\"&gt;4 &lt;div id=\"left\" class=\"column\"&gt;#left&lt;/div&gt;5 &lt;div id=\"center\" class=\"column\"&gt;#center&lt;/div&gt;6 &lt;div id=\"right\" class=\"column\"&gt;#right&lt;/div&gt;7 &lt;/div&gt;8 &lt;div id=\"footer\"&gt;#footer&lt;/div&gt;9&lt;/body&gt; 1body &#123;2 min-width: 550px; 3 font-weight: bold;4 font-size: 20px;5&#125;6#header, #footer &#123;7 background: rgba(29, 27, 27, 0.726);8 text-align: center;9 height: 60px;10 line-height: 60px;11&#125;12#container &#123;13 display: flex;14&#125;15#container .column &#123;16 text-align: center;17 height: 300px;18 line-height: 300px;19&#125;20#center &#123;21 flex: 1;22 background: rgb(206, 201, 201);23&#125;24#left &#123;25 width: 200px; 26 background: rgba(95, 179, 235, 0.972);27&#125;28#right &#123;29 width: 150px; 30 background: rgb(231, 105, 2);31&#125; grid布局 如上图所示，我们把body划分成三行四列的网格，其中有5条列网格线 给body元素添加display: grid;属性变成一个grid(网格)给header元素设置grid-row: 1; 和 grid-column: 1/5; 意思是占据第一行网格的从第一条列网格线开始到第五条列网格线结束给footer元素设置grid-row: 1; 和 grid-column: 1/5; 意思是占据第三行网格的从第一条列网格线开始到第五条列网格线结束给left元素设置grid-row: 2; 和 grid-column: 1/2; 意思是占据第二行网格的从第一条列网格线开始到第二条列网格线结束给center元素设置grid-row: 2; 和 grid-column: 2/4; 意思是占据第二行网格的从第二条列网格线开始到第四条列网格线结束给right元素设置grid-row: 2; 和 grid-column: 4/5; 意思是占据第二行网格的从第四条列网格线开始到第五条列网格线结束 12&lt;body&gt;3 &lt;div id=\"header\"&gt;#header&lt;/div&gt;4 &lt;div id=\"left\" class=\"column\"&gt;#left&lt;/div&gt;5 &lt;div id=\"center\" class=\"column\"&gt;#center&lt;/div&gt;6 &lt;div id=\"right\" class=\"column\"&gt;#right&lt;/div&gt;7 &lt;div id=\"footer\"&gt;#footer&lt;/div&gt;8&lt;/body&gt; 1body &#123;2 min-width: 550px;3 font-weight: bold;4 font-size: 20px;5 display: grid;6 &#125;7 #header,8 #footer &#123;9 background: rgba(29, 27, 27, 0.726);10 text-align: center;11 height: 60px;12 line-height: 60px;13 &#125;14 #header &#123;15 grid-row: 1;16 grid-column: 1/5;17 &#125;18 #footer &#123;19 grid-row: 3;20 grid-column: 1/5;21 &#125;22 .column &#123;23 text-align: center;24 height: 300px;25 line-height: 300px;26 &#125;27 #left &#123;28 grid-row: 2;29 grid-column: 1/2;30 background: rgba(95, 179, 235, 0.972);31 &#125;32 #center &#123;33 grid-row: 2;34 grid-column: 2/4;35 background: rgb(206, 201, 201);36 &#125;37 #right &#123;38 grid-row: 2;39 grid-column: 4/5;40 background: rgb(231, 105, 2);41 &#125; 三种实现形式 三种实现形式内，不考虑兼容性的情况下，flex布局是使用比较广的，浮动的布局相对比较麻烦，需要设定各种margin和padding和position的定位，grid布局属于二维布局，就兼容性来说，还是比flex要差一些。","categories":[],"tags":[{"name":"圣杯布局","slug":"圣杯布局","permalink":"http://lenmon54231.github.io.git/tags/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/"},{"name":"float，flex，grid","slug":"float，flex，grid","permalink":"http://lenmon54231.github.io.git/tags/float%EF%BC%8Cflex%EF%BC%8Cgrid/"}]},{"title":"静态布局、自适应布局、流式布局、响应式布局、弹性布局等的概念和区别","slug":"静态布局、自适应布局、流式布局、响应式布局、弹性布局等的概念和区别","date":"2019-12-02T09:16:26.000Z","updated":"2019-12-03T15:01:01.272Z","comments":true,"path":"2019/12/02/静态布局、自适应布局、流式布局、响应式布局、弹性布局等的概念和区别/","link":"","permalink":"http://lenmon54231.github.io.git/2019/12/02/%E9%9D%99%E6%80%81%E5%B8%83%E5%B1%80%E3%80%81%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80%E3%80%81%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80%E3%80%81%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E3%80%81%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80%E7%AD%89%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8C%BA%E5%88%AB/","excerpt":"静态布局、自适应布局、流式布局、响应式布局、弹性布局等的概念和区别静态布局 布局特点：不管浏览器尺寸具体是多少，网页布局始终按照最初写代码时的布局来显示。常规的pc的网站都是静态（定宽度）布局的，也就是设置了min-width，这样的话，如果小于这个宽度就会出现滚动条，如果大于这个宽度则内容居中外加背景，这种设计常见与pc端。 布局特点：不管浏览器尺寸具体是多少，网页布局始终按照最初写代码时的布局来显示。 常规的pc的网站都是静态（定宽度）布局的，也就是设置了min-width，这样的话，如果小于这个宽度就会出现滚动条，如果大于这个宽度则内容居中外加背景，这种设计常见与pc端。 优点：这种布局方式对设计师和CSS编写者来说都是最简单的，亦没有兼容性问题。 缺点：显而易见，即不能根据用户的屏幕尺寸做出不同的表现。","text":"静态布局、自适应布局、流式布局、响应式布局、弹性布局等的概念和区别静态布局 布局特点：不管浏览器尺寸具体是多少，网页布局始终按照最初写代码时的布局来显示。常规的pc的网站都是静态（定宽度）布局的，也就是设置了min-width，这样的话，如果小于这个宽度就会出现滚动条，如果大于这个宽度则内容居中外加背景，这种设计常见与pc端。 布局特点：不管浏览器尺寸具体是多少，网页布局始终按照最初写代码时的布局来显示。 常规的pc的网站都是静态（定宽度）布局的，也就是设置了min-width，这样的话，如果小于这个宽度就会出现滚动条，如果大于这个宽度则内容居中外加背景，这种设计常见与pc端。 优点：这种布局方式对设计师和CSS编写者来说都是最简单的，亦没有兼容性问题。 缺点：显而易见，即不能根据用户的屏幕尺寸做出不同的表现。 流式布局 流式布局（Liquid）的特点（也叫”Fluid”) 是页面元素的宽度按照屏幕分辨率进行适配调整，但整体布局不变。代表作栅栏系统（网格系统）。 网页中主要的划分区域的尺寸使用百分数（搭配min-、max-属性使用），例如，设置网页主体的宽度为80%，min-width为960px。图片也作类似处理（width:100%, max-width一般设定为图片本身的尺寸，防止被拉伸而失真）。 布局和设计 布局特点：屏幕分辨率变化时，页面里元素的大小会变化而但布局不变。【这就导致如果屏幕太大或者太小都会导致元素无法正常显示】 设计方法：使用%百分比定义宽度，高度大都是用px来固定住，可以根据可视区域 (viewport) 和父元素的实时尺寸进行调整，尽可能的适应各种分辨率。往往配合 max-width/min-width 等属性控制尺寸流动范围以免过大或者过小影响阅读。 优点和缺点 按照屏幕分辨率进行适配调整，但整体布局不变。适应早期的web布局，兼容性高 缺点明显：主要的问题是如果屏幕尺度跨度太大，那么在相对其原始设计而言过小或过大的屏幕上不能正常显示。因为宽度使用%百分比定义，但是高度和文字大小等大都是用px来固定，所以在大屏幕的手机下显示效果会变成有些页面元素宽度被拉的很长，但是高度、文字大小还是和原来一样（即：这些东西无法变得“流式”），显示非常不协调。 自适应布局 自适应布局的特点是分别为不同的屏幕分辨率定义布局，即创建多个静态布局，每个静态布局对应一个屏幕分辨率范围。 实现方法 使用 @media 媒体查询给不同尺寸和介质的设备切换不同的样式。在优秀的响应范围设计下可以给适配范围内的设备最好的体验，在同一个设备下实际还是固定的布局。 特点 布局特点：屏幕分辨率变化时，页面里面元素的位置会变化而大小不会变化。 本质上是多个多个静态布局。 响应式布局 可以把响应式布局看作是流式布局和自适应布局设计理念的融合。 响应式设计的目标是确保一个页面在所有终端上（各种尺寸的PC、手机、手表、冰箱的Web浏览器等等）都能显示出令人满意的效果，对CSS编写者而言，在实现上不拘泥于具体手法，但通常是糅合了流式布局+弹性布局，再搭配媒体查询技术使用。 设计方法： 媒体查询+流式布局。通常使用 @media 媒体查询 和网格系统 (Grid System) 配合相对布局单位进行布局，实际上就是综合响应式、流动等上述技术通过 CSS 给单一网页不同设备返回不同样式的技术统称。 特点： 每个屏幕分辨率下面会有一个布局样式，即元素位置和大小都会变。 优点和缺点： 适应pc和移动端，如果足够耐心，效果完美 （1）媒体查询是有限的，也就是可以枚举出来的，只能适应主流的宽高。（2）要匹配足够多的屏幕大小，工作量不小，设计也需要多个版本。需要很多个@media。 代表比如bootstrap，element等都是响应式的设计布局 弹性布局 这类布局的特点是，包裹文字的各元素的尺寸采用em/rem做单位，而页面的主要划分区域的尺寸仍使用百分数或px做单位（同「流式布局」或「静态/固定布局」）。早期浏览器不支持整个页面按比例缩放，仅支持网页内文字尺寸的放大，这种情况下。使用em/rem做单位，可以使包裹文字的元素随着文字的缩放而缩放。 rem,em区别： rem,em都是顺应不同网页字体大小展现而产生的。其中，em是相对其父元素，在实际应用中相对而言会带来很多不便；而rem是始终相对于html大小，即页面根元素。 根据不同的屏幕尺寸，rem改变的是font-size的大小，但是本质上，客户看到的布局是没有改变的，这一点不同于响应式布局。 响应式和弹性布局之间的对比： rem布局：改变浏览器宽度，页面所有元素的高宽都等比例缩放，也就是大屏幕下导航是横的，小屏幕下还是横的只不过变小了。 响应式布局：改变浏览器宽度，“布局”会随之变化，不是一成不变的，例如导航栏在大屏幕下是横排，在小屏幕下是竖排，在超小屏幕下隐藏为菜单，也就是说如果有足够的耐心，在每一种屏幕下都应该有合理的布局，完美的效果。 总结 如果只做pc端，那么静态布局（定宽度）是最好的选择； 如果做移动端，且设计对高度和元素间距要求不高，那么弹性布局（rem+js）是最好的选择，一份css+一份js调节font-size搞定； 如果pc，移动要兼容，而且要求很高那么响应式布局还是最好的选择，前提是设计根据不同的高宽做不同的设计，响应式根据媒体查询做不同的布局。","categories":[],"tags":[{"name":"自适应布局","slug":"自适应布局","permalink":"http://lenmon54231.github.io.git/tags/%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/"},{"name":"响应式布局，弹性布局","slug":"响应式布局，弹性布局","permalink":"http://lenmon54231.github.io.git/tags/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%EF%BC%8C%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/"}]},{"title":"布局：display:flex和Bootstrap的visible生效","slug":"visible冲突","date":"2019-12-02T08:40:14.000Z","updated":"2019-12-03T09:25:58.597Z","comments":true,"path":"2019/12/02/visible冲突/","link":"","permalink":"http://lenmon54231.github.io.git/2019/12/02/visible%E5%86%B2%E7%AA%81/","excerpt":"bootstrapBootstrap，来自 Twitter，是目前最受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。 问题使用bootstrap做布局，通过不同的col-*标签可以让不同的分辨率下的设备有不同的显示，同时还可以用visible和hidden来实现隐藏和显示一些html，但是使用的时候，有发现一些问题：当使用visible和display：flex的时候，flex不生效！","text":"bootstrapBootstrap，来自 Twitter，是目前最受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。 问题使用bootstrap做布局，通过不同的col-*标签可以让不同的分辨率下的设备有不同的显示，同时还可以用visible和hidden来实现隐藏和显示一些html，但是使用的时候，有发现一些问题：当使用visible和display：flex的时候，flex不生效！ 文档查找bootstrap相关文档，了解了下visible和hidden的一些说明如下： 需要谨慎使用这些工具，避免在同一个站点创建完全不同的版本。响应式实用工具目前只适用于块和表切换。 超小屏幕 手机 (&lt;768px) 小屏幕 平板 (≥768px) 中等屏幕 桌面 (≥992px) 大屏幕 桌面 (≥1200px) .visible-xs-* 可见 隐藏 隐藏 隐藏 .visible-sm-* 隐藏 可见 隐藏 隐藏 .visible-md-* 隐藏 隐藏 可见 隐藏 .visible-lg-* 隐藏 隐藏 隐藏 可见 .hidden-xs 隐藏 可见 可见 可见 .hidden-sm 可见 隐藏 可见 可见 .hidden-md 可见 可见 隐藏 可见 .hidden-lg 可见 可见 可见 隐藏 从 v3.2.0 版本起，形如 .visible-- 的类针对每种屏幕大小都有了三种变体，每个针对 CSS 中不同的 display 属性，列表如下： 类组 CSS display .visible-*-block display: block; .visible-*-inline display: inline; .visible-*-inline-block display: inline-block; 可以看到，不同的visible形式是对应的不同的CSS display形式。 冲突在同一个html元素上使用display：felx；和在class上添加visible会被后者覆盖，从而失效。","categories":[],"tags":[{"name":"flex","slug":"flex","permalink":"http://lenmon54231.github.io.git/tags/flex/"},{"name":"bootstrap","slug":"bootstrap","permalink":"http://lenmon54231.github.io.git/tags/bootstrap/"},{"name":"布局","slug":"布局","permalink":"http://lenmon54231.github.io.git/tags/%E5%B8%83%E5%B1%80/"},{"name":"visible","slug":"visible","permalink":"http://lenmon54231.github.io.git/tags/visible/"},{"name":"冲突","slug":"冲突","permalink":"http://lenmon54231.github.io.git/tags/%E5%86%B2%E7%AA%81/"}]},{"title":"清除浮动的3种方法","slug":"清除浮动","date":"2019-12-01T14:22:50.000Z","updated":"2019-12-03T06:52:54.297Z","comments":true,"path":"2019/12/01/清除浮动/","link":"","permalink":"http://lenmon54231.github.io.git/2019/12/01/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/","excerpt":"浮动float 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使文本围绕在图像周围，不过在 CSS 中，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。 1img2 &#123;3 float:right;4 &#125; 如果浮动非替换元素，则要指定一个明确的宽度；否则，它们会尽可能地窄。注释：假如在一行之上只有极少的空间可供浮动元素，那么这个元素会跳至下一行，这个过程会持续到某一行拥有足够的空间为止。 清除浮动浮动会带来什么影响？浮动主要会影响页面的布局，给元素加上浮动后，元素会脱离文档流，从而导致以下的几个现象： 外层父级元素边框不能撑开; 外层父级元素背景不能显示; margin值不能正确显示;","text":"浮动float 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使文本围绕在图像周围，不过在 CSS 中，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。 1img2 &#123;3 float:right;4 &#125; 如果浮动非替换元素，则要指定一个明确的宽度；否则，它们会尽可能地窄。注释：假如在一行之上只有极少的空间可供浮动元素，那么这个元素会跳至下一行，这个过程会持续到某一行拥有足够的空间为止。 清除浮动浮动会带来什么影响？浮动主要会影响页面的布局，给元素加上浮动后，元素会脱离文档流，从而导致以下的几个现象： 外层父级元素边框不能撑开; 外层父级元素背景不能显示; margin值不能正确显示; 图片如下:代码如下：HTML1&lt;div class=\"outer\"&gt;2 &lt;div class=\"div1\"&gt;1&lt;/div&gt;3 &lt;div class=\"div2\"&gt;2&lt;/div&gt;4 &lt;div class=\"div3\"&gt;3&lt;/div&gt;5&lt;/div&gt; CSS1.outer&#123;border: 1px solid #ccc;background: #fc9;color: #fff; margin: 50px auto;padding: 50px;&#125;2.div1&#123;width: 80px;height: 80px;background: red;float: left;&#125;3.div2&#123;width: 80px;height: 80px;background: blue;float: left;&#125;4.div3&#123;width: 80px;height: 80px;background: sienna;float: left;&#125; 如何清除浮动？ 添加新的元素 、应用 clear：bothHTML1&lt;div class=\"outer\"&gt;2 &lt;div class=\"div1\"&gt;1&lt;/div&gt;3 &lt;div class=\"div2\"&gt;2&lt;/div&gt;4 &lt;div class=\"div3\"&gt;3&lt;/div&gt;5 &lt;div class=\"clear\"&gt;&lt;/div&gt;6&lt;/div&gt; CSS1.clear&#123;clear:both; height: 0; line-height: 0; font-size: 0&#125; 父级div定义 overflow: auto（注意：是父级div也就是这里的 div.outer）HTML1&lt;div class=\"outer over-flow\"&gt; //这里添加了一个class2 &lt;div class=\"div1\"&gt;1&lt;/div&gt;3 &lt;div class=\"div2\"&gt;2&lt;/div&gt;4 &lt;div class=\"div3\"&gt;3&lt;/div&gt;5 &lt;!--&lt;div class=\"clear\"&gt;&lt;/div&gt;--&gt;6&lt;/div&gt; CSS1.over-flow&#123;2 overflow: auto; zoom: 1; //zoom: 1; 是在处理兼容性问题3&#125; 注意:使用overflow属性来清除浮动有一点需要注意，overflow属性共有三个属性值：hidden,auto,visible。我们可以使用hiddent和auto值来清除浮动，但切记不能使用visible值，如果使用这个值将无法达到清除浮动效果，其他两个值都可以，其区据说在于一个对seo比较友好，另个hidden对seo不是太友好，其他区别我就说不上了，也不浪费时间。3. :after 方法：（注意：作用于浮动元素的父亲）HTML 1&lt;div class=\"outer\"&gt; //这里添加了一个class2 &lt;div class=\"div1\"&gt;1&lt;/div&gt;3 &lt;div class=\"div2\"&gt;2&lt;/div&gt;4 &lt;div class=\"div3\"&gt;3&lt;/div&gt;5 &lt;!--&lt;div class=\"clear\"&gt;&lt;/div&gt;--&gt;6&lt;/div&gt; CSS 1.outer &#123;zoom:1;&#125; /*==for IE6/7 Maxthon2==*/2.outer :after &#123;clear:both;content:'.';display:block;width: 0;height: 0;visibility:hidden;&#125; /*==for FF/chrome/opera/IE8==*/3&#125; 其中clear:both;指清除所有浮动；content: ‘.’; display:block;对于FF/chrome/opera/IE8不能缺少，其中content（）可以取值也可以为空。visibility:hidden;的作用是允许浏览器渲染它，但是不显示出来，这样才能实现清楚浮动。 OVER……","categories":[],"tags":[]},{"title":"markdown语法","slug":"markdown语法","date":"2019-12-01T14:22:50.000Z","updated":"2019-12-03T10:04:56.780Z","comments":true,"path":"2019/12/01/markdown语法/","link":"","permalink":"http://lenmon54231.github.io.git/2019/12/01/markdown%E8%AF%AD%E6%B3%95/","excerpt":"markdown语法Markdown 是一种轻量级的「标记语言」，优点在于: 专注你的文字内容而不是排版样式。 轻松的导出 HTML、PDF 和本身的 .md 文件。 纯文本内容，兼容所有的文本编辑器与字处理软件。 可读，直观。适合所有人的写作语言。 hexo中使用hexo中生成的文章，全部支持md语法，所以有必要学习一下语法规则，常用的规则有:","text":"markdown语法Markdown 是一种轻量级的「标记语言」，优点在于: 专注你的文字内容而不是排版样式。 轻松的导出 HTML、PDF 和本身的 .md 文件。 纯文本内容，兼容所有的文本编辑器与字处理软件。 可读，直观。适合所有人的写作语言。 hexo中使用hexo中生成的文章，全部支持md语法，所以有必要学习一下语法规则，常用的规则有: 概述比较常用的规则如下，包括标题，内容，引用，表格等等，基本包含绝大多数文章的表达规则: 1分段: 两个回车;2换行: 两个空格 + 回车;3标题: # ~ ######，#号的个数表示几级标题，即表示一级标题到六级标题;4强调: **文字** ， __文字__ ， _文字_ ， *文字* ， 文字;5引用: &gt; 注意后面紧跟个空格;6表格: - 和 | 分割行和列 ， : 控制对其方式;7代码块: 四个空格 开头或， 使用&#96;&#96;&#96; 代码内容 &#96;&#96;&#96;;;8链接: [文字](链接地址);9图片: ![图片说明](图片地址) ，地址可以是本地路劲，也可以是网络地址;10列表: * ， + ， - ， 1. ，选其中之一，注意后面紧跟个空格; 标题 示例:1# 欢迎使用Markdown编辑器写博客 一级标题 对应 &lt;h1&gt; &lt;&#x2F;h1&gt;2## 标题输入 二级标题 对应 &lt;h2&gt; &lt;&#x2F;h2&gt;3### 三级标题 三级标题 对应 &lt;h3&gt; &lt;&#x2F;h3&gt;4#### 四级标题 四级标题 对应 &lt;h4&gt; &lt;&#x2F;h4&gt;5##### 五级标题 五级标题 对应 &lt;h5&gt; &lt;&#x2F;h5&gt;6###### 六级标题 六级标题 对应 &lt;h6&gt; &lt;&#x2F;h6&gt; 内容 示例:1字体: **加粗** 2字体: *斜体* 3字体: ***加粗并斜体*** 4删除线: ~~删除一段文本~~ 效果: 加粗斜体加粗并斜体删除一段文本 引用 示例:1&gt;这是引用的内容2&gt;&gt;这是引用的内容3&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容 效果: 这是引用的内容 这是引用的内容 这是引用的内容 分割线 示例:1---2----3***4***** 效果: 图片 示例:1![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;) 超链接 示例: 1[超链接名](超链接地址 &quot;超链接title&quot;)2title可加可不加3[简书](http:&#x2F;&#x2F;jianshu.com)4[百度](http:&#x2F;&#x2F;baidu.com) 效果: 简书百度 列表 示例: 无序列表: 1- 列表内容2+ 列表内容3* 列表内容 有序列表: 11.列表内容22.列表内容33.列表内容 效果: 无序列表: 列表内容 列表内容 列表内容 有序列表: 1.列表内容2.列表内容3.列表内容 表格 示例:1姓名|技能|排行2--|:--:|--:3刘备|哭|大哥4关羽|打|二哥5张飞|骂|三弟 效果: 姓名 技能 排行 刘备 哭 大哥 关羽 打 二哥 张飞 骂 三弟 代码 示例:1`printf()` 函数;2​```javascript3$(document).ready(function () &#123;4 alert('RUNOOB');5&#125;);6​ 1* 效果:2&gt;&#96;&#96;&#96;javascript3&gt;$(document).ready(function () &#123;4&gt; alert(&#39;RUNOOB&#39;);5&gt;&#125;)6&gt; 转义Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符： 1\\ 反斜线2&#96; 反引号3* 星号4_ 下划线5&#123;&#125; 花括号6[] 方括号7() 小括号8# 井字号9+ 加号10- 减号11. 英文句点12! 感叹号 ASCII 代码HTML 和 XHTML 用标准的 7 比特 ASCII 代码在网络上传输数据。7 比特 ASCII 代码可提供 128 个不同的字符值。点击此处跳转至ASCII","categories":[],"tags":[]}]}